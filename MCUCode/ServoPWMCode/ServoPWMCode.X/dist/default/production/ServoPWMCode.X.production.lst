

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Jun 13 13:53:17 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     	;# 
    23  0001                     	;# 
    24  0002                     	;# 
    25  0003                     	;# 
    26  0004                     	;# 
    27  0005                     	;# 
    28  0006                     	;# 
    29  0007                     	;# 
    30  0008                     	;# 
    31  0009                     	;# 
    32  000A                     	;# 
    33  000B                     	;# 
    34  000C                     	;# 
    35  000D                     	;# 
    36  000E                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0016                     	;# 
    43  0017                     	;# 
    44  0018                     	;# 
    45  0019                     	;# 
    46  001A                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  008C                     	;# 
    50  008D                     	;# 
    51  008E                     	;# 
    52  0091                     	;# 
    53  0092                     	;# 
    54  0093                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0097                     	;# 
    58  0099                     	;# 
    59  009A                     	;# 
    60  009B                     	;# 
    61  009B                     	;# 
    62  009C                     	;# 
    63  009D                     	;# 
    64  009E                     	;# 
    65  009F                     	;# 
    66  010C                     	;# 
    67  010D                     	;# 
    68  010E                     	;# 
    69  0111                     	;# 
    70  0112                     	;# 
    71  0113                     	;# 
    72  0114                     	;# 
    73  0115                     	;# 
    74  0116                     	;# 
    75  0117                     	;# 
    76  0118                     	;# 
    77  0119                     	;# 
    78  011D                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  018E                     	;# 
    82  0191                     	;# 
    83  0191                     	;# 
    84  0192                     	;# 
    85  0193                     	;# 
    86  0193                     	;# 
    87  0194                     	;# 
    88  0195                     	;# 
    89  0196                     	;# 
    90  0199                     	;# 
    91  019A                     	;# 
    92  019B                     	;# 
    93  019B                     	;# 
    94  019C                     	;# 
    95  019D                     	;# 
    96  019E                     	;# 
    97  019F                     	;# 
    98  020C                     	;# 
    99  020D                     	;# 
   100  0211                     	;# 
   101  0211                     	;# 
   102  0212                     	;# 
   103  0212                     	;# 
   104  0213                     	;# 
   105  0213                     	;# 
   106  0214                     	;# 
   107  0214                     	;# 
   108  0215                     	;# 
   109  0215                     	;# 
   110  0215                     	;# 
   111  0216                     	;# 
   112  0216                     	;# 
   113  0217                     	;# 
   114  0217                     	;# 
   115  0391                     	;# 
   116  0392                     	;# 
   117  0393                     	;# 
   118  0394                     	;# 
   119  0395                     	;# 
   120  0396                     	;# 
   121  0498                     	;# 
   122  0498                     	;# 
   123  0499                     	;# 
   124  049A                     	;# 
   125  049B                     	;# 
   126  049B                     	;# 
   127  049C                     	;# 
   128  049D                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0F20                     	;# 
   170  0F21                     	;# 
   171  0F22                     	;# 
   172  0F23                     	;# 
   173  0F24                     	;# 
   174  0F25                     	;# 
   175  0F26                     	;# 
   176  0F27                     	;# 
   177  0F28                     	;# 
   178  0F29                     	;# 
   179  0F2A                     	;# 
   180  0F2B                     	;# 
   181  0F2C                     	;# 
   182  0F2D                     	;# 
   183  0F2E                     	;# 
   184  0F2F                     	;# 
   185  0F8C                     	;# 
   186  0F8D                     	;# 
   187  0F91                     	;# 
   188  0F95                     	;# 
   189  0F96                     	;# 
   190  0F97                     	;# 
   191  0F9C                     	;# 
   192  0F9D                     	;# 
   193  0F9E                     	;# 
   194  0FE3                     	;# 
   195  0FE4                     	;# 
   196  0FE5                     	;# 
   197  0FE6                     	;# 
   198  0FE7                     	;# 
   199  0FE8                     	;# 
   200  0FE9                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206                           
   207                           	psect	idataBANK0
   208  044B                     __pidataBANK0:	
   209                           
   210                           ;initializer for main@F4271
   211  044B  3420               	retlw	32
   212  044C  3420               	retlw	32
   213  044D  3400               	retlw	0
   214                           
   215                           	psect	stringtext
   216  0800                     __pstringtext:	
   217  0800                     _hexpowers:	
   218  0800  3401               	retlw	1
   219  0801  3400               	retlw	0
   220  0802  3410               	retlw	16
   221  0803  3400               	retlw	0
   222  0804  3400               	retlw	0
   223  0805  3401               	retlw	1
   224  0806  3400               	retlw	0
   225  0807  3410               	retlw	16
   226  0808                     __end_of_hexpowers:	
   227  000C                     _PORTAbits	set	12
   228  000E                     _PORTCbits	set	14
   229  001B                     _PR2	set	27
   230  001C                     _T2CON	set	28
   231  008D                     _RCIF	set	141
   232  008C                     _TXIF	set	140
   233  0099                     _OSCCON	set	153
   234  008C                     _TRISAbits	set	140
   235  008E                     _TRISCbits	set	142
   236  048D                     _RCIE	set	1165
   237  048C                     _TXIE	set	1164
   238  019B                     _SPBRG	set	411
   239  018C                     _ANSELAbits	set	396
   240  018E                     _ANSELCbits	set	398
   241  0199                     _RCREG	set	409
   242  019A                     _TXREG	set	410
   243  0CFB                     _BRG16	set	3323
   244  0CF2                     _BRGH	set	3314
   245  0CEC                     _CREN	set	3308
   246  0CEA                     _FERR	set	3306
   247  0CE9                     _OERR	set	3305
   248  0CEE                     _RX9	set	3310
   249  0CE8                     _RX9D	set	3304
   250  0CEF                     _SPEN	set	3311
   251  0CED                     _SREN	set	3309
   252  0CF4                     _SYNC	set	3316
   253  0CF6                     _TX9	set	3318
   254  0CF5                     _TXEN	set	3317
   255  0613                     _PWM1CON	set	1555
   256  0612                     _PWM1DCH	set	1554
   257  0611                     _PWM1DCL	set	1553
   258  0616                     _PWM2CON	set	1558
   259  0615                     _PWM2DCH	set	1557
   260  0614                     _PWM2DCL	set	1556
   261  0808                     STR_1:	
   262  0808  3441               	retlw	65	;'A'
   263  0809  346C               	retlw	108	;'l'
   264  080A  3474               	retlw	116	;'t'
   265  080B  343A               	retlw	58	;':'
   266  080C  3420               	retlw	32	;' '
   267  080D  3430               	retlw	48	;'0'
   268  080E  3478               	retlw	120	;'x'
   269  080F  3425               	retlw	37	;'%'
   270  0810  3430               	retlw	48	;'0'
   271  0811  3432               	retlw	50	;'2'
   272  0812  3458               	retlw	88	;'X'
   273  0813  3420               	retlw	32	;' '
   274  0814  3441               	retlw	65	;'A'
   275  0815  347A               	retlw	122	;'z'
   276  0816  343A               	retlw	58	;':'
   277  0817  3420               	retlw	32	;' '
   278  0818  3425               	retlw	37	;'%'
   279  0819  3473               	retlw	115	;'s'
   280  081A  3420               	retlw	32	;' '
   281  081B  340A               	retlw	10
   282  081C  340D               	retlw	13
   283  081D  3400               	retlw	0
   284  081E                     STR_3:	
   285  081E  3430               	retlw	48	;'0'
   286  081F  3431               	retlw	49	;'1'
   287  0820  3432               	retlw	50	;'2'
   288  0821  3433               	retlw	51	;'3'
   289  0822  3434               	retlw	52	;'4'
   290  0823  3435               	retlw	53	;'5'
   291  0824  3436               	retlw	54	;'6'
   292  0825  3437               	retlw	55	;'7'
   293  0826  3438               	retlw	56	;'8'
   294  0827  3439               	retlw	57	;'9'
   295  0828  3441               	retlw	65	;'A'
   296  0829  3442               	retlw	66	;'B'
   297  082A  3443               	retlw	67	;'C'
   298  082B  3444               	retlw	68	;'D'
   299  082C  3445               	retlw	69	;'E'
   300  082D  3446               	retlw	70	;'F'
   301  082E  3400               	retlw	0
   302  082F                     STR_2:	
   303  082F  3428               	retlw	40	;'('
   304  0830  346E               	retlw	110	;'n'
   305  0831  3475               	retlw	117	;'u'
   306  0832  346C               	retlw	108	;'l'
   307  0833  346C               	retlw	108	;'l'
   308  0834  3429               	retlw	41	;')'
   309  0835  3400               	retlw	0
   310                           
   311                           ; #config settings
   312  0000                     
   313                           	psect	cinit
   314  07F1                     start_initialization:	
   315  07F1                     __initialization:	
   316                           
   317                           ; Initialize objects allocated to BANK0
   318  07F1  0020               	movlb	0	; select bank0
   319  07F2  3184  244B  3187   	fcall	__pidataBANK0	;fetch initializer
   320  07F5  00D0               	movwf	__pdataBANK0& (0+127)
   321  07F6  3184  244C  3187   	fcall	__pidataBANK0+1	;fetch initializer
   322  07F9  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   323  07FA  3184  244D         	fcall	__pidataBANK0+2	;fetch initializer
   324  07FC  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   325  07FD                     end_of_initialization:	
   326                           ;End of C runtime variable initialization code
   327                           
   328  07FD                     __end_of__initialization:	
   329  07FD  0020               	movlb	0
   330  07FE  3185  2D5A         	ljmp	_main	;jump to C main() function
   331                           
   332                           	psect	dataBANK0
   333  0050                     __pdataBANK0:	
   334  0050                     main@F4271:	
   335  0050                     	ds	3
   336                           
   337                           	psect	cstackCOMMON
   338  0070                     __pcstackCOMMON:	
   339  0070                     ?_isdigit:	
   340  0070                     ??_isdigit:	
   341                           ; 1 bit 
   342                           
   343  0070                     ?_putch:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ??_putch:	
   347                           ; 0 bytes @ 0x0
   348                           
   349  0070                     ?_SetAltVal:	
   350                           ; 0 bytes @ 0x0
   351                           
   352  0070                     ??_SetAltVal:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0070                     ?_SetAzVal:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ??_SetAzVal:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ?_init:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_main:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ?_sci_Init:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?___wmul:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?___lwdiv:	
   374                           ; 2 bytes @ 0x0
   375                           
   376  0070                     putch@data:	
   377                           ; 2 bytes @ 0x0
   378                           
   379  0070                     _isdigit$410:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ___wmul@multiplier:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ___lwdiv@divisor:	
   386                           ; 2 bytes @ 0x0
   387                           
   388  0070                     sci_Init@baud:	
   389                           ; 2 bytes @ 0x0
   390                           
   391                           
   392                           ; 4 bytes @ 0x0
   393  0070                     	ds	1
   394  0071                     ?_PrintStrToUART:	
   395  0071                     SetAltVal@val:	
   396                           ; 0 bytes @ 0x1
   397                           
   398  0071                     SetAzVal@val:	
   399                           ; 1 bytes @ 0x1
   400                           
   401  0071                     PrintStrToUART@len:	
   402                           ; 1 bytes @ 0x1
   403                           
   404  0071                     isdigit@c:	
   405                           ; 1 bytes @ 0x1
   406                           
   407                           
   408                           ; 1 bytes @ 0x1
   409  0071                     	ds	1
   410  0072                     ??_PrintStrToUART:	
   411  0072                     ___wmul@multiplicand:	
   412                           ; 0 bytes @ 0x2
   413                           
   414  0072                     ___lwdiv@dividend:	
   415                           ; 2 bytes @ 0x2
   416                           
   417                           
   418                           ; 2 bytes @ 0x2
   419  0072                     	ds	1
   420  0073                     PrintStrToUART@str:	
   421                           
   422                           ; 1 bytes @ 0x3
   423  0073                     	ds	1
   424  0074                     ??___wmul:	
   425  0074                     ??___lwdiv:	
   426                           ; 0 bytes @ 0x4
   427                           
   428  0074                     sci_Init@ninebits:	
   429                           ; 0 bytes @ 0x4
   430                           
   431  0074                     PrintStrToUART@ii:	
   432                           ; 1 bytes @ 0x4
   433                           
   434  0074                     ___wmul@product:	
   435                           ; 1 bytes @ 0x4
   436                           
   437                           
   438                           ; 2 bytes @ 0x4
   439  0074                     	ds	1
   440  0075                     ??_sci_Init:	
   441  0075                     ??_init:	
   442                           ; 0 bytes @ 0x5
   443                           
   444  0075                     ___lwdiv@quotient:	
   445                           ; 0 bytes @ 0x5
   446                           
   447                           
   448                           ; 2 bytes @ 0x5
   449  0075                     	ds	2
   450  0077                     ___lwdiv@counter:	
   451                           
   452                           ; 1 bytes @ 0x7
   453  0077                     	ds	1
   454  0078                     ?_sprintf:	
   455  0078                     sprintf@f:	
   456                           ; 2 bytes @ 0x8
   457                           
   458                           
   459                           ; 2 bytes @ 0x8
   460  0078                     	ds	5
   461                           
   462                           	psect	cstackBANK0
   463  0020                     __pcstackBANK0:	
   464  0020                     ??_sprintf:	
   465                           
   466                           ; 0 bytes @ 0x0
   467  0020                     	ds	4
   468  0024                     sprintf@idx:	
   469                           
   470                           ; 1 bytes @ 0x4
   471  0024                     	ds	1
   472  0025                     sprintf@flag:	
   473                           
   474                           ; 1 bytes @ 0x5
   475  0025                     	ds	1
   476  0026                     sprintf@val:	
   477                           
   478                           ; 2 bytes @ 0x6
   479  0026                     	ds	2
   480  0028                     sprintf@prec:	
   481                           
   482                           ; 1 bytes @ 0x8
   483  0028                     	ds	1
   484  0029                     sprintf@ap:	
   485                           
   486                           ; 1 bytes @ 0x9
   487  0029                     	ds	1
   488  002A                     sprintf@cp:	
   489                           
   490                           ; 2 bytes @ 0xA
   491  002A                     	ds	2
   492  002C                     sprintf@len:	
   493                           
   494                           ; 2 bytes @ 0xC
   495  002C                     	ds	2
   496  002E                     sprintf@sp:	
   497                           
   498                           ; 1 bytes @ 0xE
   499  002E                     	ds	1
   500  002F                     sprintf@width:	
   501                           
   502                           ; 2 bytes @ 0xF
   503  002F                     	ds	2
   504  0031                     sprintf@c:	
   505                           
   506                           ; 1 bytes @ 0x11
   507  0031                     	ds	1
   508  0032                     ??_main:	
   509                           
   510                           ; 0 bytes @ 0x12
   511  0032                     	ds	3
   512  0035                     main@str:	
   513                           
   514                           ; 20 bytes @ 0x15
   515  0035                     	ds	20
   516  0049                     main@azstr:	
   517                           
   518                           ; 3 bytes @ 0x29
   519  0049                     	ds	3
   520  004C                     main@wasMove:	
   521                           
   522                           ; 1 bytes @ 0x2C
   523  004C                     	ds	1
   524  004D                     main@altDir:	
   525                           
   526                           ; 1 bytes @ 0x2D
   527  004D                     	ds	1
   528  004E                     main@altVal:	
   529                           
   530                           ; 1 bytes @ 0x2E
   531  004E                     	ds	1
   532  004F                     main@azDir:	
   533                           
   534                           ; 1 bytes @ 0x2F
   535  004F                     	ds	1
   536                           
   537                           	psect	maintext
   538  055A                     __pmaintext:	
   539 ;;
   540 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   541 ;;
   542 ;; *************** function _main *****************
   543 ;; Defined at:
   544 ;;		line 276 in file "main.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;  str            20   21[BANK0 ] unsigned char [20]
   549 ;;  azstr           3   41[BANK0 ] unsigned char [3]
   550 ;;  azDir           1   47[BANK0 ] unsigned char 
   551 ;;  altVal          1   46[BANK0 ] unsigned char 
   552 ;;  altDir          1   45[BANK0 ] unsigned char 
   553 ;;  wasMove         1   44[BANK0 ] unsigned char 
   554 ;; Return value:  Size  Location     Type
   555 ;;		None               void
   556 ;; Registers used:
   557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : B1F/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   563 ;;      Params:         0       0       0       0
   564 ;;      Locals:         0      27       0       0
   565 ;;      Temps:          0       3       0       0
   566 ;;      Totals:         0      30       0       0
   567 ;;Total ram usage:       30 bytes
   568 ;; Hardware stack levels required when called:    2
   569 ;; This function calls:
   570 ;;		_PrintStrToUART
   571 ;;		_SetAltVal
   572 ;;		_SetAzVal
   573 ;;		_init
   574 ;;		_sprintf
   575 ;; This function is called by:
   576 ;;		Startup code after reset
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           
   581                           ;psect for function _main
   582  055A                     _main:	
   583                           
   584                           ;main.c: 278: char altDir = 0;
   585                           
   586                           ;incstack = 0
   587                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   588  055A  0020               	movlb	0	; select bank0
   589  055B  01CD               	clrf	main@altDir
   590                           
   591                           ;main.c: 279: char azDir = 0;
   592  055C  01CF               	clrf	main@azDir
   593                           
   594                           ;main.c: 280: char wasMove = 0;
   595  055D  01CC               	clrf	main@wasMove
   596                           
   597                           ;main.c: 281: char altVal = 0x10;
   598  055E  3010               	movlw	16
   599  055F  00B2               	movwf	??_main
   600  0560  0832               	movf	??_main,w
   601  0561  00CE               	movwf	main@altVal
   602                           
   603                           ;main.c: 282: char str[20];
   604                           ;main.c: 283: char azstr[3] = "  ";
   605  0562  0850               	movf	main@F4271,w
   606  0563  00C9               	movwf	main@azstr
   607  0564  0851               	movf	main@F4271+1,w
   608  0565  00CA               	movwf	main@azstr+1
   609  0566  0852               	movf	main@F4271+2,w
   610  0567  00CB               	movwf	main@azstr+2
   611                           
   612                           ;main.c: 286: init();
   613  0568  3185  2523  3185   	fcall	_init
   614                           
   615                           ;main.c: 287: PORTCbits.RC4 = 1;
   616  056B  0020               	movlb	0	; select bank0
   617  056C  160E               	bsf	14,4	;volatile
   618                           
   619                           ;main.c: 288: _delay((unsigned long)((1000)*(2000000/4000.0)));
   620  056D  3003               	movlw	3
   621  056E  00B4               	movwf	??_main+2
   622  056F  308A               	movlw	138
   623  0570  00B3               	movwf	??_main+1
   624  0571  3056               	movlw	86
   625  0572  00B2               	movwf	??_main
   626  0573                     u1247:	
   627  0573  0BB2               	decfsz	??_main,f
   628  0574  2D73               	goto	u1247
   629  0575  0BB3               	decfsz	??_main+1,f
   630  0576  2D73               	goto	u1247
   631  0577  0BB4               	decfsz	??_main+2,f
   632  0578  2D73               	goto	u1247
   633  0579  3200               	nop2
   634                           
   635                           ;main.c: 289: PORTCbits.RC4 = 0;
   636  057A  0020               	movlb	0	; select bank0
   637  057B  120E               	bcf	14,4	;volatile
   638  057C                     l1257:	
   639                           ;main.c: 291: while(1)
   640                           
   641                           
   642                           ;main.c: 292: {
   643                           ;main.c: 294: wasMove = 0;
   644  057C  0020               	movlb	0	; select bank0
   645  057D  01CC               	clrf	main@wasMove
   646                           
   647                           ;main.c: 295: altDir = 0;
   648  057E  01CD               	clrf	main@altDir
   649                           
   650                           ;main.c: 296: azDir = 0;
   651  057F  01CF               	clrf	main@azDir
   652                           
   653                           ;main.c: 298: PORTAbits.RA2 = 0;
   654  0580  110C               	bcf	12,2	;volatile
   655                           
   656                           ;main.c: 299: PORTAbits.RA4 = 0;
   657  0581  120C               	bcf	12,4	;volatile
   658                           
   659                           ;main.c: 300: PORTAbits.RA5 = 0;
   660  0582  128C               	bcf	12,5	;volatile
   661                           
   662                           ;main.c: 301: PORTCbits.RC7 = 0;
   663  0583  138E               	bcf	14,7	;volatile
   664                           
   665                           ;main.c: 304: if( PORTCbits.RC2 != 0 )
   666  0584  1D0E               	btfss	14,2	;volatile
   667  0585  2D8A               	goto	l1275
   668                           
   669                           ;main.c: 305: altDir++;
   670  0586  3001               	movlw	1
   671  0587  00B2               	movwf	??_main
   672  0588  0832               	movf	??_main,w
   673  0589  07CD               	addwf	main@altDir,f
   674  058A                     l1275:	
   675                           
   676                           ;main.c: 306: if( PORTCbits.RC6 != 0 )
   677  058A  1F0E               	btfss	14,6	;volatile
   678  058B  2D8E               	goto	l1279
   679                           
   680                           ;main.c: 307: altDir--;
   681  058C  3001               	movlw	1
   682  058D  02CD               	subwf	main@altDir,f
   683  058E                     l1279:	
   684                           
   685                           ;main.c: 308: if( PORTCbits.RC0 != 0 )
   686  058E  1C0E               	btfss	14,0	;volatile
   687  058F  2D94               	goto	l1283
   688                           
   689                           ;main.c: 309: azDir++;
   690  0590  3001               	movlw	1
   691  0591  00B2               	movwf	??_main
   692  0592  0832               	movf	??_main,w
   693  0593  07CF               	addwf	main@azDir,f
   694  0594                     l1283:	
   695                           
   696                           ;main.c: 310: if( PORTCbits.RC1 != 0 )
   697  0594  1C8E               	btfss	14,1	;volatile
   698  0595  2D98               	goto	l136
   699                           
   700                           ;main.c: 311: azDir--;
   701  0596  3001               	movlw	1
   702  0597  02CF               	subwf	main@azDir,f
   703  0598                     l136:	
   704                           
   705                           ;main.c: 314: if( (azDir != 0) || (altDir != 0) )
   706  0598  084F               	movf	main@azDir,w
   707  0599  1903               	btfsc	3,2
   708  059A  084D               	movf	main@altDir,w
   709  059B  1903               	btfsc	3,2
   710  059C  2DB0               	goto	l1299
   711                           
   712                           ;main.c: 315: wasMove = 1;
   713  059D  01CC               	clrf	main@wasMove
   714  059E  0ACC               	incf	main@wasMove,f
   715                           
   716                           ;main.c: 318: switch( altDir )
   717  059F  2DB0               	goto	l1299
   718  05A0                     l1289:	
   719                           ;main.c: 319: {
   720                           ;main.c: 320: case 1:
   721                           
   722                           
   723                           ;main.c: 324: if( altVal > 0x10)
   724  05A0  3011               	movlw	17
   725  05A1  024E               	subwf	main@altVal,w
   726  05A2  1C03               	skipc
   727  05A3  2DB8               	goto	l1301
   728                           
   729                           ;main.c: 325: altVal--;
   730  05A4  3001               	movlw	1
   731  05A5  02CE               	subwf	main@altVal,f
   732                           
   733                           ;main.c: 326: break;
   734  05A6  2DB8               	goto	l1301
   735  05A7                     l1293:	
   736                           ;main.c: 328: case -1:
   737                           
   738                           
   739                           ;main.c: 329: if( altVal < 0x2F)
   740  05A7  302F               	movlw	47
   741  05A8  024E               	subwf	main@altVal,w
   742  05A9  1803               	skipnc
   743  05AA  2DB8               	goto	l1301
   744                           
   745                           ;main.c: 330: altVal++;
   746  05AB  3001               	movlw	1
   747  05AC  00B2               	movwf	??_main
   748  05AD  0832               	movf	??_main,w
   749  05AE  07CE               	addwf	main@altVal,f
   750                           
   751                           ;main.c: 335: }
   752                           
   753                           ;main.c: 334: break;
   754                           
   755                           ;main.c: 332: default:
   756                           
   757                           ;main.c: 331: break;
   758  05AF  2DB8               	goto	l1301
   759  05B0                     l1299:	
   760  05B0  084D               	movf	main@altDir,w
   761                           
   762                           ; Switch size 1, requested type "space"
   763                           ; Number of cases is 2, Range of values is 1 to 255
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte            7     4 (average)
   767                           ; jumptable            263     9 (fixed)
   768                           ;	Chosen strategy is simple_byte
   769  05B1  3A01               	xorlw	1	; case 1
   770  05B2  1903               	skipnz
   771  05B3  2DA0               	goto	l1289
   772  05B4  3AFE               	xorlw	254	; case 255
   773  05B5  1903               	skipnz
   774  05B6  2DA7               	goto	l1293
   775  05B7  2DB8               	goto	l1301
   776  05B8                     l1301:	
   777                           
   778                           ;main.c: 338: SetAltVal(altVal);
   779  05B8  084E               	movf	main@altVal,w
   780  05B9  3184  2464  3185   	fcall	_SetAltVal
   781                           
   782                           ;main.c: 340: if( altVal <= 0x10)
   783  05BC  3011               	movlw	17
   784  05BD  0020               	movlb	0	; select bank0
   785  05BE  024E               	subwf	main@altVal,w
   786  05BF  1803               	skipnc
   787  05C0  2DC3               	goto	l147
   788                           
   789                           ;main.c: 341: PORTAbits.RA4 = 1;
   790  05C1  160C               	bsf	12,4	;volatile
   791  05C2  2DC4               	goto	l1307
   792  05C3                     l147:	
   793                           
   794                           ;main.c: 342: else
   795                           ;main.c: 343: PORTAbits.RA4 = 0;
   796  05C3  120C               	bcf	12,4	;volatile
   797  05C4                     l1307:	
   798                           
   799                           ;main.c: 345: if( altVal >= 0x2F )
   800  05C4  302F               	movlw	47
   801  05C5  024E               	subwf	main@altVal,w
   802  05C6  1C03               	skipc
   803  05C7  2DCA               	goto	l149
   804                           
   805                           ;main.c: 346: PORTAbits.RA2 = 1;
   806  05C8  150C               	bsf	12,2	;volatile
   807  05C9  2DDB               	goto	l1319
   808  05CA                     l149:	
   809                           
   810                           ;main.c: 347: else
   811                           ;main.c: 348: PORTAbits.RA2 = 0;
   812  05CA  110C               	bcf	12,2	;volatile
   813                           
   814                           ;main.c: 351: switch( azDir )
   815  05CB  2DDB               	goto	l1319
   816  05CC                     l1311:	
   817                           ;main.c: 352: {
   818                           ;main.c: 353: case 1:
   819                           
   820                           
   821                           ;main.c: 354: SetAzVal(0x2D);
   822  05CC  302D               	movlw	45
   823  05CD  3184  2478  3185   	fcall	_SetAzVal
   824                           
   825                           ;main.c: 355: break;
   826  05D0  2DE4               	goto	l1321
   827  05D1                     l1313:	
   828                           ;main.c: 356: case -1:
   829                           
   830                           
   831                           ;main.c: 357: SetAzVal(0x30);
   832  05D1  3030               	movlw	48
   833  05D2  3184  2478  3185   	fcall	_SetAzVal
   834                           
   835                           ;main.c: 358: break;
   836  05D5  2DE4               	goto	l1321
   837  05D6                     l1315:	
   838                           ;main.c: 359: default:
   839                           
   840                           
   841                           ;main.c: 361: SetAzVal(0x00);
   842  05D6  3000               	movlw	0
   843  05D7  3184  2478  3185   	fcall	_SetAzVal
   844                           
   845                           ;main.c: 363: }
   846                           
   847                           ;main.c: 362: break;
   848  05DA  2DE4               	goto	l1321
   849  05DB                     l1319:	
   850  05DB  0020               	movlb	0	; select bank0
   851  05DC  084F               	movf	main@azDir,w
   852                           
   853                           ; Switch size 1, requested type "space"
   854                           ; Number of cases is 2, Range of values is 1 to 255
   855                           ; switch strategies available:
   856                           ; Name         Instructions Cycles
   857                           ; simple_byte            7     4 (average)
   858                           ; jumptable            263     9 (fixed)
   859                           ;	Chosen strategy is simple_byte
   860  05DD  3A01               	xorlw	1	; case 1
   861  05DE  1903               	skipnz
   862  05DF  2DCC               	goto	l1311
   863  05E0  3AFE               	xorlw	254	; case 255
   864  05E1  1903               	skipnz
   865  05E2  2DD1               	goto	l1313
   866  05E3  2DD6               	goto	l1315
   867  05E4                     l1321:	
   868                           
   869                           ;main.c: 367: if( azDir != 0 )
   870  05E4  0020               	movlb	0	; select bank0
   871  05E5  084F               	movf	main@azDir,w
   872  05E6  1903               	btfsc	3,2
   873  05E7  2DF5               	goto	l1327
   874                           
   875                           ;main.c: 368: {
   876                           ;main.c: 369: _delay((unsigned long)((40)*(2000000/4000.0)));
   877  05E8  301A               	movlw	26
   878  05E9  00B3               	movwf	??_main+1
   879  05EA  30F8               	movlw	248
   880  05EB  00B2               	movwf	??_main
   881  05EC                     u1257:	
   882  05EC  0BB2               	decfsz	??_main,f
   883  05ED  2DEC               	goto	u1257
   884  05EE  0BB3               	decfsz	??_main+1,f
   885  05EF  2DEC               	goto	u1257
   886  05F0  0000               	nop
   887                           
   888                           ;main.c: 370: SetAzVal(0x00);
   889  05F1  3000               	movlw	0
   890  05F2  3184  2478  3185   	fcall	_SetAzVal
   891  05F5                     l1327:	
   892                           
   893                           ;main.c: 371: }
   894                           ;main.c: 374: if( wasMove != 0 )
   895  05F5  0020               	movlb	0	; select bank0
   896  05F6  084C               	movf	main@wasMove,w
   897  05F7  1903               	btfsc	3,2
   898  05F8  2E2A               	goto	l1347
   899                           
   900                           ;main.c: 375: {
   901                           ;main.c: 376: if( (azDir != 1) && (azDir != 0))
   902  05F9  034F               	decf	main@azDir,w
   903  05FA  1903               	btfsc	3,2
   904  05FB  2E01               	goto	l1335
   905  05FC  084F               	movf	main@azDir,w
   906  05FD  1903               	btfsc	3,2
   907  05FE  2E01               	goto	l1335
   908                           
   909                           ;main.c: 377: azstr[0] = '-';
   910  05FF  302D               	movlw	45
   911  0600  2E02               	goto	L1
   912  0601                     l1335:	
   913                           
   914                           ;main.c: 378: else
   915                           ;main.c: 379: azstr[0] = ' ';
   916  0601  3020               	movlw	32
   917  0602                     L1:	
   918  0602  00B2               	movwf	??_main
   919  0603  0832               	movf	??_main,w
   920  0604  00C9               	movwf	main@azstr
   921                           
   922                           ;main.c: 381: if( azDir != 0)
   923  0605  084F               	movf	main@azDir,w
   924  0606  1903               	btfsc	3,2
   925  0607  2E0A               	goto	l1341
   926                           
   927                           ;main.c: 382: azstr[1] = '1';
   928  0608  3031               	movlw	49
   929  0609  2E0B               	goto	L2
   930  060A                     l1341:	
   931                           
   932                           ;main.c: 383: else
   933                           ;main.c: 384: azstr[1] = '0';
   934  060A  3030               	movlw	48
   935  060B                     L2:	
   936  060B  00B2               	movwf	??_main
   937  060C  0832               	movf	??_main,w
   938  060D  00CA               	movwf	main@azstr+1
   939                           
   940                           ;main.c: 386: sprintf(str, "Alt: 0x%02X Az: %s \n\r", altVal, azstr );
   941  060E  3008               	movlw	low (STR_1| (0+32768))
   942  060F  00F8               	movwf	sprintf@f
   943  0610  3088               	movlw	high (STR_1| (0+32768))
   944  0611  00F9               	movwf	sprintf@f+1
   945  0612  084E               	movf	main@altVal,w
   946  0613  00B2               	movwf	??_main
   947  0614  01B3               	clrf	??_main+1
   948  0615  0832               	movf	??_main,w
   949  0616  00FA               	movwf	?_sprintf+2
   950  0617  0833               	movf	??_main+1,w
   951  0618  00FB               	movwf	?_sprintf+3
   952  0619  3049               	movlw	(low (main@azstr| 0))& (0+255)
   953  061A  00B4               	movwf	??_main+2
   954  061B  0834               	movf	??_main+2,w
   955  061C  00FC               	movwf	?_sprintf+4
   956  061D  3035               	movlw	(low (main@str| 0))& (0+255)
   957  061E  3186  2639  3185   	fcall	_sprintf
   958                           
   959                           ;main.c: 387: PrintStrToUART(str, 20);
   960  0621  3014               	movlw	20
   961  0622  0020               	movlb	0	; select bank0
   962  0623  00B2               	movwf	??_main
   963  0624  0832               	movf	??_main,w
   964  0625  00F1               	movwf	PrintStrToUART@len
   965  0626  3035               	movlw	(low (main@str| 0))& (0+255)
   966  0627  3184  24C7  3185   	fcall	_PrintStrToUART
   967  062A                     l1347:	
   968                           
   969                           ;main.c: 388: }
   970                           ;main.c: 391: _delay((unsigned long)((1000)*(2000000/4000.0)));
   971  062A  3003               	movlw	3
   972  062B  0020               	movlb	0	; select bank0
   973  062C  00B4               	movwf	??_main+2
   974  062D  308A               	movlw	138
   975  062E  00B3               	movwf	??_main+1
   976  062F  3056               	movlw	86
   977  0630  00B2               	movwf	??_main
   978  0631                     u1267:	
   979  0631  0BB2               	decfsz	??_main,f
   980  0632  2E31               	goto	u1267
   981  0633  0BB3               	decfsz	??_main+1,f
   982  0634  2E31               	goto	u1267
   983  0635  0BB4               	decfsz	??_main+2,f
   984  0636  2E31               	goto	u1267
   985  0637  3200               	nop2
   986  0638  2D7C               	goto	l1257
   987  0639                     __end_of_main:	
   988                           ;main.c: 392: }
   989                           ;main.c: 393: return;
   990                           
   991                           
   992                           	psect	text1
   993  0639                     __ptext1:	
   994 ;; *************** function _sprintf *****************
   995 ;; Defined at:
   996 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;  sp              1    wreg     PTR unsigned char 
   999 ;;		 -> main@str(20), 
  1000 ;;  f               2    8[COMMON] PTR const unsigned char 
  1001 ;;		 -> STR_1(22), 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  1004 ;;		 -> main@str(20), 
  1005 ;;  idx             1    4[BANK0 ] unsigned char 
  1006 ;;  tmpval          4    0        struct .
  1007 ;;  width           2   15[BANK0 ] int 
  1008 ;;  len             2   12[BANK0 ] unsigned int 
  1009 ;;  cp              2   10[BANK0 ] PTR const unsigned char 
  1010 ;;		 -> STR_2(7), main@azstr(3), 
  1011 ;;  val             2    6[BANK0 ] unsigned int 
  1012 ;;  c               1   17[BANK0 ] char 
  1013 ;;  ap              1    9[BANK0 ] PTR void [1]
  1014 ;;		 -> ?_sprintf(2), 
  1015 ;;  prec            1    8[BANK0 ] char 
  1016 ;;  flag            1    5[BANK0 ] unsigned char 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  2    8[COMMON] int 
  1019 ;; Registers used:
  1020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1026 ;;      Params:         5       0       0       0
  1027 ;;      Locals:         0      14       0       0
  1028 ;;      Temps:          0       4       0       0
  1029 ;;      Totals:         5      18       0       0
  1030 ;;Total ram usage:       23 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:    1
  1033 ;; This function calls:
  1034 ;;		___lwdiv
  1035 ;;		___wmul
  1036 ;;		_isdigit
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _sprintf
  1044  0639                     _sprintf:	
  1045                           
  1046                           ;incstack = 0
  1047                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1048                           ;sprintf@sp stored from wreg
  1049  0639  0020               	movlb	0	; select bank0
  1050  063A  00AE               	movwf	sprintf@sp
  1051                           
  1052                           ;doprnt.c: 494: va_list ap;
  1053                           ;doprnt.c: 499: signed char c;
  1054                           ;doprnt.c: 501: int width;
  1055                           ;doprnt.c: 506: signed char prec;
  1056                           ;doprnt.c: 508: unsigned char flag;
  1057                           ;doprnt.c: 523: union {
  1058                           ;doprnt.c: 524: unsigned long vd;
  1059                           ;doprnt.c: 525: double integ;
  1060                           ;doprnt.c: 526: } tmpval;
  1061                           ;doprnt.c: 528: unsigned int val;
  1062                           ;doprnt.c: 529: unsigned len;
  1063                           ;doprnt.c: 530: const char * cp;
  1064                           ;doprnt.c: 533: *ap = __va_start();
  1065  063B  307A               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1066  063C  00A0               	movwf	??_sprintf
  1067  063D  0820               	movf	??_sprintf,w
  1068  063E  00A9               	movwf	sprintf@ap
  1069  063F                     l1237:	
  1070                           ;doprnt.c: 536: while(c = *f++) {
  1071                           
  1072  063F  0879               	movf	sprintf@f+1,w
  1073  0640  00A1               	movwf	??_sprintf+1
  1074  0641  0878               	movf	sprintf@f,w
  1075  0642  00A0               	movwf	??_sprintf
  1076  0643  0AF8               	incf	sprintf@f,f
  1077  0644  1903               	skipnz
  1078  0645  0AF9               	incf	sprintf@f+1,f
  1079  0646  0820               	movf	??_sprintf,w
  1080  0647  0084               	movwf	4
  1081  0648  0821               	movf	??_sprintf+1,w
  1082  0649  0085               	movwf	5
  1083  064A  0800               	movf	0,w	;code access
  1084  064B  00A2               	movwf	??_sprintf+2
  1085  064C  0822               	movf	??_sprintf+2,w
  1086  064D  00B1               	movwf	sprintf@c
  1087  064E  0831               	movf	sprintf@c,w
  1088  064F  1903               	btfsc	3,2
  1089  0650  2FEB               	goto	l1239
  1090                           
  1091                           ;doprnt.c: 538: if(c != '%')
  1092  0651  3025               	movlw	37
  1093  0652  0631               	xorwf	sprintf@c,w
  1094  0653  1903               	btfsc	3,2
  1095  0654  2E61               	goto	l1127
  1096                           
  1097                           ;doprnt.c: 540: {
  1098                           ;doprnt.c: 541: ((*sp++ = (c)));
  1099  0655  0831               	movf	sprintf@c,w
  1100  0656  00A0               	movwf	??_sprintf
  1101  0657  082E               	movf	sprintf@sp,w
  1102  0658  0086               	movwf	6
  1103  0659  0187               	clrf	7
  1104  065A  0820               	movf	??_sprintf,w
  1105  065B  0081               	movwf	1
  1106  065C  3001               	movlw	1
  1107  065D  00A0               	movwf	??_sprintf
  1108  065E  0820               	movf	??_sprintf,w
  1109  065F  07AE               	addwf	sprintf@sp,f
  1110                           
  1111                           ;doprnt.c: 542: continue;
  1112  0660  2E3F               	goto	l1237
  1113  0661                     l1127:	
  1114                           
  1115                           ;doprnt.c: 543: }
  1116                           ;doprnt.c: 546: width = 0;
  1117  0661  01AF               	clrf	sprintf@width
  1118  0662  01B0               	clrf	sprintf@width+1
  1119                           
  1120                           ;doprnt.c: 548: flag = 0;
  1121  0663  01A5               	clrf	sprintf@flag
  1122                           
  1123                           ;doprnt.c: 551: switch(*f) {
  1124                           
  1125                           ;doprnt.c: 550: for(;;) {
  1126  0664  2E6A               	goto	l1133
  1127  0665                     l180:	
  1128                           ;doprnt.c: 579: case '0':
  1129                           
  1130                           
  1131                           ;doprnt.c: 580: flag |= 0x04;
  1132  0665  1525               	bsf	sprintf@flag,2
  1133                           
  1134                           ;doprnt.c: 581: f++;
  1135  0666  3001               	movlw	1
  1136  0667  07F8               	addwf	sprintf@f,f
  1137  0668  3000               	movlw	0
  1138  0669  3DF9               	addwfc	sprintf@f+1,f
  1139  066A                     l1133:	
  1140                           ;doprnt.c: 584: }
  1141                           
  1142                           ;doprnt.c: 582: continue;
  1143                           
  1144  066A  0878               	movf	sprintf@f,w
  1145  066B  0084               	movwf	4
  1146  066C  0879               	movf	sprintf@f+1,w
  1147  066D  0085               	movwf	5
  1148  066E  0800               	movf	0,w	;code access
  1149                           
  1150                           ; Switch size 1, requested type "space"
  1151                           ; Number of cases is 1, Range of values is 48 to 48
  1152                           ; switch strategies available:
  1153                           ; Name         Instructions Cycles
  1154                           ; simple_byte            4     3 (average)
  1155                           ; direct_byte           11     9 (fixed)
  1156                           ; jumptable            263     9 (fixed)
  1157                           ;	Chosen strategy is simple_byte
  1158  066F  3A30               	xorlw	48	; case 48
  1159  0670  1903               	skipnz
  1160  0671  2E65               	goto	l180
  1161  0672  2E73               	goto	l1135
  1162  0673                     l1135:	
  1163                           ;doprnt.c: 586: }
  1164                           
  1165                           ;doprnt.c: 585: break;
  1166                           
  1167                           
  1168                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1169  0673  0878               	movf	sprintf@f,w
  1170  0674  0084               	movwf	4
  1171  0675  0879               	movf	sprintf@f+1,w
  1172  0676  0085               	movwf	5
  1173  0677  0800               	movf	0,w	;code access
  1174  0678  3184  2456  3186   	fcall	_isdigit
  1175  067B  1C03               	btfss	3,0
  1176  067C  2F15               	goto	l1183
  1177                           
  1178                           ;doprnt.c: 598: width = 0;
  1179  067D  0020               	movlb	0	; select bank0
  1180  067E  01AF               	clrf	sprintf@width
  1181  067F  01B0               	clrf	sprintf@width+1
  1182  0680                     l1139:	
  1183                           ;doprnt.c: 599: do {
  1184                           
  1185                           
  1186                           ;doprnt.c: 600: width *= 10;
  1187  0680  300A               	movlw	10
  1188  0681  00F0               	movwf	___wmul@multiplier
  1189  0682  3000               	movlw	0
  1190  0683  00F1               	movwf	___wmul@multiplier+1
  1191  0684  0020               	movlb	0	; select bank0
  1192  0685  0830               	movf	sprintf@width+1,w
  1193  0686  00F3               	movwf	___wmul@multiplicand+1
  1194  0687  082F               	movf	sprintf@width,w
  1195  0688  00F2               	movwf	___wmul@multiplicand
  1196  0689  3184  248C  3186   	fcall	___wmul
  1197  068C  0871               	movf	?___wmul+1,w
  1198  068D  0020               	movlb	0	; select bank0
  1199  068E  00B0               	movwf	sprintf@width+1
  1200  068F  0870               	movf	?___wmul,w
  1201  0690  00AF               	movwf	sprintf@width
  1202                           
  1203                           ;doprnt.c: 601: width += *f++ - '0';
  1204  0691  0878               	movf	sprintf@f,w
  1205  0692  0084               	movwf	4
  1206  0693  0879               	movf	sprintf@f+1,w
  1207  0694  0085               	movwf	5
  1208  0695  0800               	movf	0,w	;code access
  1209  0696  3ED0               	addlw	208
  1210  0697  00A0               	movwf	??_sprintf
  1211  0698  30FF               	movlw	255
  1212  0699  1803               	skipnc
  1213  069A  3000               	movlw	0
  1214  069B  00A1               	movwf	??_sprintf+1
  1215  069C  0820               	movf	??_sprintf,w
  1216  069D  07AF               	addwf	sprintf@width,f
  1217  069E  0821               	movf	??_sprintf+1,w
  1218  069F  3DB0               	addwfc	sprintf@width+1,f
  1219  06A0  3001               	movlw	1
  1220  06A1  07F8               	addwf	sprintf@f,f
  1221  06A2  3000               	movlw	0
  1222  06A3  3DF9               	addwfc	sprintf@f+1,f
  1223                           
  1224                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1225  06A4  0878               	movf	sprintf@f,w
  1226  06A5  0084               	movwf	4
  1227  06A6  0879               	movf	sprintf@f+1,w
  1228  06A7  0085               	movwf	5
  1229  06A8  0800               	movf	0,w	;code access
  1230  06A9  3184  2456  3186   	fcall	_isdigit
  1231  06AC  1C03               	btfss	3,0
  1232  06AD  2F15               	goto	l1183
  1233  06AE  2E80               	goto	l1139
  1234  06AF                     l1147:	
  1235                           ;doprnt.c: 728: case 's':
  1236                           
  1237                           ;doprnt.c: 718: case 'x':
  1238                           ;doprnt.c: 723: break;
  1239                           
  1240                           ;doprnt.c: 712: case 'X':
  1241                           
  1242                           ;doprnt.c: 638: goto alldone;
  1243                           
  1244                           ;doprnt.c: 637: case 0:
  1245                           
  1246                           ;doprnt.c: 608: }
  1247                           ;doprnt.c: 635: switch(c = *f++) {
  1248                           
  1249                           
  1250                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1251  06AF  0020               	movlb	0	; select bank0
  1252  06B0  0829               	movf	sprintf@ap,w
  1253  06B1  0086               	movwf	6
  1254  06B2  0187               	clrf	7
  1255  06B3  0801               	movf	1,w
  1256  06B4  00AA               	movwf	sprintf@cp
  1257  06B5  3000               	movlw	0
  1258  06B6  00AB               	movwf	sprintf@cp+1
  1259  06B7  3001               	movlw	1
  1260  06B8  00A0               	movwf	??_sprintf
  1261  06B9  0820               	movf	??_sprintf,w
  1262  06BA  07A9               	addwf	sprintf@ap,f
  1263                           
  1264                           ;doprnt.c: 740: if(!cp)
  1265  06BB  082A               	movf	sprintf@cp,w
  1266  06BC  042B               	iorwf	sprintf@cp+1,w
  1267  06BD  1D03               	btfss	3,2
  1268  06BE  2EC3               	goto	l1155
  1269                           
  1270                           ;doprnt.c: 741: cp = "(null)";
  1271  06BF  302F               	movlw	low (STR_2| (0+32768))
  1272  06C0  00AA               	movwf	sprintf@cp
  1273  06C1  3088               	movlw	high (STR_2| (0+32768))
  1274  06C2  00AB               	movwf	sprintf@cp+1
  1275  06C3                     l1155:	
  1276                           
  1277                           ;doprnt.c: 745: len = 0;
  1278  06C3  01AC               	clrf	sprintf@len
  1279  06C4  01AD               	clrf	sprintf@len+1
  1280  06C5                     l1159:	
  1281                           ;doprnt.c: 746: while(cp[len])
  1282                           
  1283  06C5  082A               	movf	sprintf@cp,w
  1284  06C6  072C               	addwf	sprintf@len,w
  1285  06C7  0084               	movwf	4
  1286  06C8  082B               	movf	sprintf@cp+1,w
  1287  06C9  3D2D               	addwfc	sprintf@len+1,w
  1288  06CA  0085               	movwf	5
  1289  06CB  0012               	moviw fsr0++
  1290  06CC  1903               	btfsc	3,2
  1291  06CD  2ED3               	goto	l1161
  1292                           
  1293                           ;doprnt.c: 747: len++;
  1294  06CE  3001               	movlw	1
  1295  06CF  07AC               	addwf	sprintf@len,f
  1296  06D0  3000               	movlw	0
  1297  06D1  3DAD               	addwfc	sprintf@len+1,f
  1298  06D2  2EC5               	goto	l1159
  1299  06D3                     l1161:	
  1300                           
  1301                           ;doprnt.c: 757: if(width > len)
  1302  06D3  0830               	movf	sprintf@width+1,w
  1303  06D4  022D               	subwf	sprintf@len+1,w
  1304  06D5  1D03               	skipz
  1305  06D6  2ED9               	goto	u955
  1306  06D7  082F               	movf	sprintf@width,w
  1307  06D8  022C               	subwf	sprintf@len,w
  1308  06D9                     u955:	
  1309  06D9  1803               	skipnc
  1310  06DA  2EE0               	goto	l1165
  1311                           
  1312                           ;doprnt.c: 758: width -= len;
  1313  06DB  082C               	movf	sprintf@len,w
  1314  06DC  02AF               	subwf	sprintf@width,f
  1315  06DD  082D               	movf	sprintf@len+1,w
  1316  06DE  3BB0               	subwfb	sprintf@width+1,f
  1317  06DF  2EE2               	goto	l1171
  1318  06E0                     l1165:	
  1319                           
  1320                           ;doprnt.c: 759: else
  1321                           ;doprnt.c: 760: width = 0;
  1322  06E0  01AF               	clrf	sprintf@width
  1323  06E1  01B0               	clrf	sprintf@width+1
  1324  06E2                     l1171:	
  1325                           ;doprnt.c: 764: while(width--)
  1326                           
  1327  06E2  30FF               	movlw	255
  1328  06E3  07AF               	addwf	sprintf@width,f
  1329  06E4  30FF               	movlw	255
  1330  06E5  3DB0               	addwfc	sprintf@width+1,f
  1331  06E6  0A2F               	incf	sprintf@width,w
  1332  06E7  1903               	btfsc	3,2
  1333  06E8  0A30               	incf	sprintf@width+1,w
  1334  06E9  1903               	btfsc	3,2
  1335  06EA  2F0A               	goto	l1179
  1336                           
  1337                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1338  06EB  3020               	movlw	32
  1339  06EC  00A0               	movwf	??_sprintf
  1340  06ED  082E               	movf	sprintf@sp,w
  1341  06EE  0086               	movwf	6
  1342  06EF  0187               	clrf	7
  1343  06F0  0820               	movf	??_sprintf,w
  1344  06F1  0081               	movwf	1
  1345  06F2  3001               	movlw	1
  1346  06F3  00A0               	movwf	??_sprintf
  1347  06F4  0820               	movf	??_sprintf,w
  1348  06F5  07AE               	addwf	sprintf@sp,f
  1349  06F6  2EE2               	goto	l1171
  1350  06F7                     l1173:	
  1351                           ;doprnt.c: 767: while(len--)
  1352                           
  1353                           
  1354                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1355  06F7  082A               	movf	sprintf@cp,w
  1356  06F8  0084               	movwf	4
  1357  06F9  082B               	movf	sprintf@cp+1,w
  1358  06FA  0085               	movwf	5
  1359  06FB  0800               	movf	0,w	;code access
  1360  06FC  00A0               	movwf	??_sprintf
  1361  06FD  082E               	movf	sprintf@sp,w
  1362  06FE  0086               	movwf	6
  1363  06FF  0187               	clrf	7
  1364  0700  0820               	movf	??_sprintf,w
  1365  0701  0081               	movwf	1
  1366  0702  3001               	movlw	1
  1367  0703  07AA               	addwf	sprintf@cp,f
  1368  0704  3000               	movlw	0
  1369  0705  3DAB               	addwfc	sprintf@cp+1,f
  1370  0706  3001               	movlw	1
  1371  0707  00A0               	movwf	??_sprintf
  1372  0708  0820               	movf	??_sprintf,w
  1373  0709  07AE               	addwf	sprintf@sp,f
  1374  070A                     l1179:	
  1375  070A  3001               	movlw	1
  1376  070B  02AC               	subwf	sprintf@len,f
  1377  070C  3000               	movlw	0
  1378  070D  3BAD               	subwfb	sprintf@len+1,f
  1379  070E  0A2C               	incf	sprintf@len,w
  1380  070F  1D03               	skipz
  1381  0710  2EF7               	goto	l1173
  1382  0711  0A2D               	incf	sprintf@len+1,w
  1383  0712  1903               	btfsc	3,2
  1384  0713  2E3F               	goto	l1237
  1385  0714  2EF7               	goto	l1173
  1386  0715                     l1183:	
  1387                           ;doprnt.c: 822: }
  1388                           
  1389                           ;doprnt.c: 813: continue;
  1390                           
  1391                           ;doprnt.c: 802: default:
  1392                           
  1393                           ;doprnt.c: 774: continue;
  1394                           
  1395  0715  0879               	movf	sprintf@f+1,w
  1396  0716  0020               	movlb	0	; select bank0
  1397  0717  00A1               	movwf	??_sprintf+1
  1398  0718  0878               	movf	sprintf@f,w
  1399  0719  00A0               	movwf	??_sprintf
  1400  071A  0AF8               	incf	sprintf@f,f
  1401  071B  1903               	skipnz
  1402  071C  0AF9               	incf	sprintf@f+1,f
  1403  071D  0820               	movf	??_sprintf,w
  1404  071E  0084               	movwf	4
  1405  071F  0821               	movf	??_sprintf+1,w
  1406  0720  0085               	movwf	5
  1407  0721  0800               	movf	0,w	;code access
  1408  0722  00B1               	movwf	sprintf@c
  1409                           
  1410                           ; Switch size 1, requested type "space"
  1411                           ; Number of cases is 4, Range of values is 0 to 120
  1412                           ; switch strategies available:
  1413                           ; Name         Instructions Cycles
  1414                           ; simple_byte           13     7 (average)
  1415                           ; direct_byte          248     6 (fixed)
  1416                           ; jumptable            260     6 (fixed)
  1417                           ;	Chosen strategy is simple_byte
  1418  0723  3A00               	xorlw	0	; case 0
  1419  0724  1903               	skipnz
  1420  0725  2FEB               	goto	l1239
  1421  0726  3A58               	xorlw	88	; case 88
  1422  0727  1903               	skipnz
  1423  0728  2F30               	goto	l1185
  1424  0729  3A2B               	xorlw	43	; case 115
  1425  072A  1903               	skipnz
  1426  072B  2EAF               	goto	l1147
  1427  072C  3A0B               	xorlw	11	; case 120
  1428  072D  1903               	skipnz
  1429  072E  2F30               	goto	l1185
  1430  072F  2E3F               	goto	l1237
  1431  0730                     l1185:	
  1432                           
  1433                           ;doprnt.c: 1273: {
  1434                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1435  0730  0020               	movlb	0	; select bank0
  1436  0731  0829               	movf	sprintf@ap,w
  1437  0732  0086               	movwf	6
  1438  0733  0187               	clrf	7
  1439  0734  3F40               	moviw [0]fsr1
  1440  0735  00A6               	movwf	sprintf@val
  1441  0736  3F41               	moviw [1]fsr1
  1442  0737  00A7               	movwf	sprintf@val+1
  1443  0738  3002               	movlw	2
  1444  0739  00A0               	movwf	??_sprintf
  1445  073A  0820               	movf	??_sprintf,w
  1446  073B  07A9               	addwf	sprintf@ap,f
  1447                           
  1448                           ;doprnt.c: 1287: }
  1449                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1450  073C  01B1               	clrf	sprintf@c
  1451  073D  0AB1               	incf	sprintf@c,f
  1452  073E  3004               	movlw	4
  1453  073F  0631               	xorwf	sprintf@c,w
  1454  0740  1903               	btfsc	3,2
  1455  0741  2F61               	goto	l1201
  1456  0742                     l1195:	
  1457                           
  1458                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1459  0742  0831               	movf	sprintf@c,w
  1460  0743  00A0               	movwf	??_sprintf
  1461  0744  01A1               	clrf	??_sprintf+1
  1462  0745  35A0               	lslf	??_sprintf,f
  1463  0746  0DA1               	rlf	??_sprintf+1,f
  1464  0747  3000               	movlw	low (_hexpowers| (0+32768))
  1465  0748  0720               	addwf	??_sprintf,w
  1466  0749  0084               	movwf	4
  1467  074A  3088               	movlw	high (_hexpowers| (0+32768))
  1468  074B  3D21               	addwfc	??_sprintf+1,w
  1469  074C  0085               	movwf	5
  1470  074D  3F00               	moviw [0]fsr0
  1471  074E  00A2               	movwf	??_sprintf+2
  1472  074F  3F01               	moviw [1]fsr0
  1473  0750  00A3               	movwf	??_sprintf+3
  1474  0751  0823               	movf	??_sprintf+3,w
  1475  0752  0227               	subwf	sprintf@val+1,w
  1476  0753  1D03               	skipz
  1477  0754  2F57               	goto	u995
  1478  0755  0822               	movf	??_sprintf+2,w
  1479  0756  0226               	subwf	sprintf@val,w
  1480  0757                     u995:	
  1481  0757  1C03               	btfss	3,0
  1482  0758  2F61               	goto	l1201
  1483                           
  1484                           ;doprnt.c: 1318: break;
  1485  0759  3001               	movlw	1
  1486  075A  00A0               	movwf	??_sprintf
  1487  075B  0820               	movf	??_sprintf,w
  1488  075C  07B1               	addwf	sprintf@c,f
  1489  075D  3004               	movlw	4
  1490  075E  0631               	xorwf	sprintf@c,w
  1491  075F  1D03               	btfss	3,2
  1492  0760  2F42               	goto	l1195
  1493  0761                     l1201:	
  1494                           
  1495                           ;doprnt.c: 1381: if(width > c)
  1496  0761  0831               	movf	sprintf@c,w
  1497  0762  00A0               	movwf	??_sprintf
  1498  0763  01A1               	clrf	??_sprintf+1
  1499  0764  1BA0               	btfsc	??_sprintf,7
  1500  0765  03A1               	decf	??_sprintf+1,f
  1501  0766  0821               	movf	??_sprintf+1,w
  1502  0767  3A80               	xorlw	128
  1503  0768  00A2               	movwf	??_sprintf+2
  1504  0769  0830               	movf	sprintf@width+1,w
  1505  076A  3A80               	xorlw	128
  1506  076B  0222               	subwf	??_sprintf+2,w
  1507  076C  1D03               	skipz
  1508  076D  2F70               	goto	u1015
  1509  076E  082F               	movf	sprintf@width,w
  1510  076F  0220               	subwf	??_sprintf,w
  1511  0770                     u1015:	
  1512  0770  1803               	skipnc
  1513  0771  2F7D               	goto	l1205
  1514                           
  1515                           ;doprnt.c: 1382: width -= c;
  1516  0772  0020               	movlb	0	; select bank0
  1517  0773  0831               	movf	sprintf@c,w
  1518  0774  00A0               	movwf	??_sprintf
  1519  0775  01A1               	clrf	??_sprintf+1
  1520  0776  1BA0               	btfsc	??_sprintf,7
  1521  0777  03A1               	decf	??_sprintf+1,f
  1522  0778  0820               	movf	??_sprintf,w
  1523  0779  02AF               	subwf	sprintf@width,f
  1524  077A  0821               	movf	??_sprintf+1,w
  1525  077B  3BB0               	subwfb	sprintf@width+1,f
  1526  077C  2F80               	goto	l1207
  1527  077D                     l1205:	
  1528                           
  1529                           ;doprnt.c: 1383: else
  1530                           ;doprnt.c: 1384: width = 0;
  1531  077D  0020               	movlb	0	; select bank0
  1532  077E  01AF               	clrf	sprintf@width
  1533  077F  01B0               	clrf	sprintf@width+1
  1534  0780                     l1207:	
  1535                           
  1536                           ;doprnt.c: 1387: if(flag & 0x04) {
  1537  0780  1D25               	btfss	sprintf@flag,2
  1538  0781  2F96               	goto	l1217
  1539  0782                     L4:	
  1540                           
  1541                           ;doprnt.c: 1415: if(width)
  1542  0782  082F               	movf	sprintf@width,w
  1543  0783  0430               	iorwf	sprintf@width+1,w
  1544  0784  1903               	btfsc	3,2
  1545  0785  2FAD               	goto	l1225
  1546                           
  1547                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1548                           
  1549                           ;doprnt.c: 1416: do
  1550  0786  3030               	movlw	48
  1551  0787  00A0               	movwf	??_sprintf
  1552  0788  082E               	movf	sprintf@sp,w
  1553  0789  0086               	movwf	6
  1554  078A  0187               	clrf	7
  1555  078B  0820               	movf	??_sprintf,w
  1556  078C  0081               	movwf	1
  1557  078D  3001               	movlw	1
  1558  078E  00A0               	movwf	??_sprintf
  1559  078F  0820               	movf	??_sprintf,w
  1560  0790  07AE               	addwf	sprintf@sp,f
  1561                           
  1562                           ;doprnt.c: 1418: while(--width);
  1563  0791  30FF               	movlw	255
  1564  0792  07AF               	addwf	sprintf@width,f
  1565  0793  30FF               	movlw	255
  1566  0794  3DB0               	addwfc	sprintf@width+1,f
  1567  0795  2F82               	goto	L4
  1568  0796                     l1217:	
  1569                           ;doprnt.c: 1420: } else
  1570                           
  1571                           
  1572                           ;doprnt.c: 1422: {
  1573                           ;doprnt.c: 1424: if(width
  1574                           ;doprnt.c: 1428: )
  1575  0796  082F               	movf	sprintf@width,w
  1576  0797  0430               	iorwf	sprintf@width+1,w
  1577  0798  1903               	btfsc	3,2
  1578  0799  2FAD               	goto	l1225
  1579  079A                     l1219:	
  1580                           ;doprnt.c: 1429: do
  1581                           
  1582                           
  1583                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1584  079A  3020               	movlw	32
  1585  079B  00A0               	movwf	??_sprintf
  1586  079C  082E               	movf	sprintf@sp,w
  1587  079D  0086               	movwf	6
  1588  079E  0187               	clrf	7
  1589  079F  0820               	movf	??_sprintf,w
  1590  07A0  0081               	movwf	1
  1591  07A1  3001               	movlw	1
  1592  07A2  00A0               	movwf	??_sprintf
  1593  07A3  0820               	movf	??_sprintf,w
  1594  07A4  07AE               	addwf	sprintf@sp,f
  1595                           
  1596                           ;doprnt.c: 1431: while(--width);
  1597  07A5  30FF               	movlw	255
  1598  07A6  07AF               	addwf	sprintf@width,f
  1599  07A7  30FF               	movlw	255
  1600  07A8  3DB0               	addwfc	sprintf@width+1,f
  1601  07A9  082F               	movf	sprintf@width,w
  1602  07AA  0430               	iorwf	sprintf@width+1,w
  1603  07AB  1D03               	btfss	3,2
  1604  07AC  2F9A               	goto	l1219
  1605  07AD                     l1225:	
  1606                           
  1607                           ;doprnt.c: 1469: }
  1608                           ;doprnt.c: 1472: prec = c;
  1609  07AD  0831               	movf	sprintf@c,w
  1610  07AE  00A0               	movwf	??_sprintf
  1611  07AF  0820               	movf	??_sprintf,w
  1612  07B0  00A8               	movwf	sprintf@prec
  1613  07B1                     l1235:	
  1614                           ;doprnt.c: 1474: while(prec--) {
  1615                           
  1616  07B1  30FF               	movlw	255
  1617  07B2  00A0               	movwf	??_sprintf
  1618  07B3  0820               	movf	??_sprintf,w
  1619  07B4  07A8               	addwf	sprintf@prec,f
  1620  07B5  0A28               	incf	sprintf@prec,w
  1621  07B6  1903               	btfsc	3,2
  1622  07B7  2E3F               	goto	l1237
  1623                           
  1624                           ;doprnt.c: 1478: {
  1625                           ;doprnt.c: 1499: {
  1626                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1627  07B8  0828               	movf	sprintf@prec,w
  1628  07B9  00A0               	movwf	??_sprintf
  1629  07BA  01A1               	clrf	??_sprintf+1
  1630  07BB  35A0               	lslf	??_sprintf,f
  1631  07BC  0DA1               	rlf	??_sprintf+1,f
  1632  07BD  3000               	movlw	low (_hexpowers| (0+32768))
  1633  07BE  0720               	addwf	??_sprintf,w
  1634  07BF  0084               	movwf	4
  1635  07C0  3088               	movlw	high (_hexpowers| (0+32768))
  1636  07C1  3D21               	addwfc	??_sprintf+1,w
  1637  07C2  0085               	movwf	5
  1638  07C3  3F00               	moviw [0]fsr0
  1639  07C4  00F0               	movwf	___lwdiv@divisor
  1640  07C5  3F01               	moviw [1]fsr0
  1641  07C6  00F1               	movwf	___lwdiv@divisor+1
  1642  07C7  0827               	movf	sprintf@val+1,w
  1643  07C8  00F3               	movwf	___lwdiv@dividend+1
  1644  07C9  0826               	movf	sprintf@val,w
  1645  07CA  00F2               	movwf	___lwdiv@dividend
  1646  07CB  3184  24EF  3186   	fcall	___lwdiv
  1647  07CE  0870               	movf	?___lwdiv,w
  1648  07CF  390F               	andlw	15
  1649  07D0  0020               	movlb	0	; select bank0
  1650  07D1  00A2               	movwf	??_sprintf+2
  1651  07D2  0822               	movf	??_sprintf+2,w
  1652  07D3  00A4               	movwf	sprintf@idx
  1653                           
  1654                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  1655  07D4  0824               	movf	sprintf@idx,w
  1656  07D5  3E1E               	addlw	low (STR_3| (0+32768))
  1657  07D6  0084               	movwf	4
  1658  07D7  3088               	movlw	high (STR_3| (0+32768))
  1659  07D8  1803               	skipnc
  1660  07D9  3E01               	addlw	1
  1661  07DA  0085               	movwf	5
  1662  07DB  0800               	movf	0,w	;code access
  1663  07DC  00A0               	movwf	??_sprintf
  1664  07DD  0820               	movf	??_sprintf,w
  1665  07DE  00B1               	movwf	sprintf@c
  1666                           
  1667                           ;doprnt.c: 1508: }
  1668                           ;doprnt.c: 1523: }
  1669                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1670  07DF  0831               	movf	sprintf@c,w
  1671  07E0  00A0               	movwf	??_sprintf
  1672  07E1  082E               	movf	sprintf@sp,w
  1673  07E2  0086               	movwf	6
  1674  07E3  0187               	clrf	7
  1675  07E4  0820               	movf	??_sprintf,w
  1676  07E5  0081               	movwf	1
  1677  07E6  3001               	movlw	1
  1678  07E7  00A0               	movwf	??_sprintf
  1679  07E8  0820               	movf	??_sprintf,w
  1680  07E9  07AE               	addwf	sprintf@sp,f
  1681  07EA  2FB1               	goto	l1235
  1682  07EB                     l1239:	
  1683                           ;doprnt.c: 1525: }
  1684                           ;doprnt.c: 1533: }
  1685                           ;doprnt.c: 1535: alldone:
  1686                           
  1687                           
  1688                           ;doprnt.c: 1538: *sp = 0;
  1689  07EB  0020               	movlb	0	; select bank0
  1690  07EC  082E               	movf	sprintf@sp,w
  1691  07ED  0086               	movwf	6
  1692  07EE  0187               	clrf	7
  1693  07EF  0181               	clrf	1
  1694  07F0  0008               	return
  1695  07F1                     __end_of_sprintf:	
  1696                           ;doprnt.c: 1540: return 0;
  1697                           ;	Return value of _sprintf is never used
  1698                           
  1699                           
  1700                           	psect	text2
  1701  0456                     __ptext2:	
  1702 ;; *************** function _isdigit *****************
  1703 ;; Defined at:
  1704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  c               1    wreg     unsigned char 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  c               1    1[COMMON] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1718 ;;      Params:         0       0       0       0
  1719 ;;      Locals:         2       0       0       0
  1720 ;;      Temps:          0       0       0       0
  1721 ;;      Totals:         2       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_sprintf
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function _isdigit
  1733  0456                     _isdigit:	
  1734                           
  1735                           ;incstack = 0
  1736                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1737                           ;isdigit@c stored from wreg
  1738  0456  00F1               	movwf	isdigit@c
  1739  0457  01F0               	clrf	_isdigit$410
  1740  0458  303A               	movlw	58
  1741  0459  0271               	subwf	isdigit@c,w
  1742  045A  1803               	skipnc
  1743  045B  2C62               	goto	l1013
  1744  045C  3030               	movlw	48
  1745  045D  0271               	subwf	isdigit@c,w
  1746  045E  1C03               	skipc
  1747  045F  2C62               	goto	l1013
  1748  0460  01F0               	clrf	_isdigit$410
  1749  0461  0AF0               	incf	_isdigit$410,f
  1750  0462                     l1013:	
  1751  0462  0C70               	rrf	_isdigit$410,w
  1752  0463  0008               	return
  1753  0464                     __end_of_isdigit:	
  1754                           
  1755                           	psect	text3
  1756  048C                     __ptext3:	
  1757 ;; *************** function ___wmul *****************
  1758 ;; Defined at:
  1759 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  multiplier      2    0[COMMON] unsigned int 
  1762 ;;  multiplicand    2    2[COMMON] unsigned int 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  product         2    4[COMMON] unsigned int 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  2    0[COMMON] unsigned int 
  1767 ;; Registers used:
  1768 ;;		wreg, status,2, status,0
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1774 ;;      Params:         4       0       0       0
  1775 ;;      Locals:         2       0       0       0
  1776 ;;      Temps:          0       0       0       0
  1777 ;;      Totals:         6       0       0       0
  1778 ;;Total ram usage:        6 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_sprintf
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function ___wmul
  1789  048C                     ___wmul:	
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1793  048C  01F4               	clrf	___wmul@product
  1794  048D  01F5               	clrf	___wmul@product+1
  1795  048E                     l1019:	
  1796  048E  1C70               	btfss	___wmul@multiplier,0
  1797  048F  2C94               	goto	l228
  1798  0490  0872               	movf	___wmul@multiplicand,w
  1799  0491  07F4               	addwf	___wmul@product,f
  1800  0492  0873               	movf	___wmul@multiplicand+1,w
  1801  0493  3DF5               	addwfc	___wmul@product+1,f
  1802  0494                     l228:	
  1803  0494  3001               	movlw	1
  1804  0495                     u775:	
  1805  0495  35F2               	lslf	___wmul@multiplicand,f
  1806  0496  0DF3               	rlf	___wmul@multiplicand+1,f
  1807  0497  0B89               	decfsz	9,f
  1808  0498  2C95               	goto	u775
  1809  0499  3001               	movlw	1
  1810  049A                     u785:	
  1811  049A  36F1               	lsrf	___wmul@multiplier+1,f
  1812  049B  0CF0               	rrf	___wmul@multiplier,f
  1813  049C  0B89               	decfsz	9,f
  1814  049D  2C9A               	goto	u785
  1815  049E  0870               	movf	___wmul@multiplier,w
  1816  049F  0471               	iorwf	___wmul@multiplier+1,w
  1817  04A0  1D03               	btfss	3,2
  1818  04A1  2C8E               	goto	l1019
  1819  04A2  0875               	movf	___wmul@product+1,w
  1820  04A3  00F1               	movwf	?___wmul+1
  1821  04A4  0874               	movf	___wmul@product,w
  1822  04A5  00F0               	movwf	?___wmul
  1823  04A6  0008               	return
  1824  04A7                     __end_of___wmul:	
  1825                           
  1826                           	psect	text4
  1827  04EF                     __ptext4:	
  1828 ;; *************** function ___lwdiv *****************
  1829 ;; Defined at:
  1830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  divisor         2    0[COMMON] unsigned int 
  1833 ;;  dividend        2    2[COMMON] unsigned int 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  quotient        2    5[COMMON] unsigned int 
  1836 ;;  counter         1    7[COMMON] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  2    0[COMMON] unsigned int 
  1839 ;; Registers used:
  1840 ;;		wreg, status,2, status,0
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1846 ;;      Params:         4       0       0       0
  1847 ;;      Locals:         3       0       0       0
  1848 ;;      Temps:          1       0       0       0
  1849 ;;      Totals:         8       0       0       0
  1850 ;;Total ram usage:        8 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_sprintf
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           
  1860                           ;psect for function ___lwdiv
  1861  04EF                     ___lwdiv:	
  1862                           
  1863                           ;incstack = 0
  1864                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1865  04EF  01F5               	clrf	___lwdiv@quotient
  1866  04F0  01F6               	clrf	___lwdiv@quotient+1
  1867  04F1  0870               	movf	___lwdiv@divisor,w
  1868  04F2  0471               	iorwf	___lwdiv@divisor+1,w
  1869  04F3  1903               	btfsc	3,2
  1870  04F4  2D1E               	goto	l1053
  1871  04F5  01F7               	clrf	___lwdiv@counter
  1872  04F6  0AF7               	incf	___lwdiv@counter,f
  1873  04F7                     l1041:	
  1874  04F7  1BF1               	btfsc	___lwdiv@divisor+1,7
  1875  04F8  2D03               	goto	l1043
  1876  04F9  3001               	movlw	1
  1877  04FA                     u815:	
  1878  04FA  35F0               	lslf	___lwdiv@divisor,f
  1879  04FB  0DF1               	rlf	___lwdiv@divisor+1,f
  1880  04FC  0B89               	decfsz	9,f
  1881  04FD  2CFA               	goto	u815
  1882  04FE  3001               	movlw	1
  1883  04FF  00F4               	movwf	??___lwdiv
  1884  0500  0874               	movf	??___lwdiv,w
  1885  0501  07F7               	addwf	___lwdiv@counter,f
  1886  0502  2CF7               	goto	l1041
  1887  0503                     l1043:	
  1888  0503  3001               	movlw	1
  1889  0504                     u835:	
  1890  0504  35F5               	lslf	___lwdiv@quotient,f
  1891  0505  0DF6               	rlf	___lwdiv@quotient+1,f
  1892  0506  0B89               	decfsz	9,f
  1893  0507  2D04               	goto	u835
  1894  0508  0871               	movf	___lwdiv@divisor+1,w
  1895  0509  0273               	subwf	___lwdiv@dividend+1,w
  1896  050A  1D03               	skipz
  1897  050B  2D0E               	goto	u845
  1898  050C  0870               	movf	___lwdiv@divisor,w
  1899  050D  0272               	subwf	___lwdiv@dividend,w
  1900  050E                     u845:	
  1901  050E  1C03               	skipc
  1902  050F  2D15               	goto	l1049
  1903  0510  0870               	movf	___lwdiv@divisor,w
  1904  0511  02F2               	subwf	___lwdiv@dividend,f
  1905  0512  0871               	movf	___lwdiv@divisor+1,w
  1906  0513  3BF3               	subwfb	___lwdiv@dividend+1,f
  1907  0514  1475               	bsf	___lwdiv@quotient,0
  1908  0515                     l1049:	
  1909  0515  3001               	movlw	1
  1910  0516                     u855:	
  1911  0516  36F1               	lsrf	___lwdiv@divisor+1,f
  1912  0517  0CF0               	rrf	___lwdiv@divisor,f
  1913  0518  0B89               	decfsz	9,f
  1914  0519  2D16               	goto	u855
  1915  051A  3001               	movlw	1
  1916  051B  02F7               	subwf	___lwdiv@counter,f
  1917  051C  1D03               	btfss	3,2
  1918  051D  2D03               	goto	l1043
  1919  051E                     l1053:	
  1920  051E  0876               	movf	___lwdiv@quotient+1,w
  1921  051F  00F1               	movwf	?___lwdiv+1
  1922  0520  0875               	movf	___lwdiv@quotient,w
  1923  0521  00F0               	movwf	?___lwdiv
  1924  0522  0008               	return
  1925  0523                     __end_of___lwdiv:	
  1926                           
  1927                           	psect	text5
  1928  0523                     __ptext5:	
  1929 ;; *************** function _init *****************
  1930 ;; Defined at:
  1931 ;;		line 206 in file "main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;		None               void
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1945 ;;      Params:         0       0       0       0
  1946 ;;      Locals:         0       0       0       0
  1947 ;;      Temps:          0       0       0       0
  1948 ;;      Totals:         0       0       0       0
  1949 ;;Total ram usage:        0 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    1
  1952 ;; This function calls:
  1953 ;;		_SetAltVal
  1954 ;;		_SetAzVal
  1955 ;;		_sci_Init
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _init
  1963  0523                     _init:	
  1964                           
  1965                           ;main.c: 209: OSCCON = 0b01100011;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
  1969  0523  3063               	movlw	99
  1970  0524  0021               	movlb	1	; select bank1
  1971  0525  0099               	movwf	25	;volatile
  1972                           
  1973                           ;main.c: 212: TRISCbits.TRISC0 = 1;
  1974  0526  140E               	bsf	14,0	;volatile
  1975                           
  1976                           ;main.c: 213: TRISCbits.TRISC1 = 1;
  1977  0527  148E               	bsf	14,1	;volatile
  1978                           
  1979                           ;main.c: 214: TRISCbits.TRISC2 = 1;
  1980  0528  150E               	bsf	14,2	;volatile
  1981                           
  1982                           ;main.c: 215: TRISCbits.TRISC3 = 0;
  1983  0529  118E               	bcf	14,3	;volatile
  1984                           
  1985                           ;main.c: 216: TRISCbits.TRISC4 = 0;
  1986  052A  120E               	bcf	14,4	;volatile
  1987                           
  1988                           ;main.c: 217: TRISCbits.TRISC5 = 0;
  1989  052B  128E               	bcf	14,5	;volatile
  1990                           
  1991                           ;main.c: 218: TRISCbits.TRISC6 = 1;
  1992  052C  170E               	bsf	14,6	;volatile
  1993                           
  1994                           ;main.c: 219: TRISCbits.TRISC7 = 0;
  1995  052D  138E               	bcf	14,7	;volatile
  1996                           
  1997                           ;main.c: 220: ANSELCbits.ANSELC = 0b00000000;
  1998  052E  0023               	movlb	3	; select bank3
  1999  052F  018E               	clrf	14	;volatile
  2000                           
  2001                           ;main.c: 223: TRISAbits.TRISA2 = 0;
  2002  0530  0021               	movlb	1	; select bank1
  2003  0531  110C               	bcf	12,2	;volatile
  2004                           
  2005                           ;main.c: 224: TRISAbits.TRISA4 = 0;
  2006  0532  120C               	bcf	12,4	;volatile
  2007                           
  2008                           ;main.c: 225: TRISAbits.TRISA5 = 0;
  2009  0533  128C               	bcf	12,5	;volatile
  2010                           
  2011                           ;main.c: 227: ANSELAbits.ANSELA = 0b00000000;
  2012  0534  30C0               	movlw	-64
  2013  0535  0023               	movlb	3	; select bank3
  2014  0536  058C               	andwf	12,f	;volatile
  2015                           
  2016                           ;main.c: 230: T2CON = 0x07;
  2017  0537  3007               	movlw	7
  2018  0538  0020               	movlb	0	; select bank0
  2019  0539  009C               	movwf	28	;volatile
  2020                           
  2021                           ;main.c: 231: PR2 = 0x9B;
  2022  053A  309B               	movlw	155
  2023  053B  009B               	movwf	27	;volatile
  2024                           
  2025                           ;main.c: 234: PWM1CON = 0b11010000;
  2026  053C  30D0               	movlw	208
  2027  053D  002C               	movlb	12	; select bank12
  2028  053E  0093               	movwf	19	;volatile
  2029                           
  2030                           ;main.c: 235: PWM1DCH = 0;
  2031  053F  0192               	clrf	18	;volatile
  2032                           
  2033                           ;main.c: 236: PWM1DCL = 0b00000000;
  2034  0540  0191               	clrf	17	;volatile
  2035                           
  2036                           ;main.c: 238: SetAltVal(0x10);
  2037  0541  3010               	movlw	16
  2038  0542  3184  2464  3185   	fcall	_SetAltVal
  2039                           
  2040                           ;main.c: 242: PWM2CON = 0b11010000;
  2041  0545  30D0               	movlw	208
  2042  0546  002C               	movlb	12	; select bank12
  2043  0547  0096               	movwf	22	;volatile
  2044                           
  2045                           ;main.c: 243: PWM2DCH = 0;
  2046  0548  0195               	clrf	21	;volatile
  2047                           
  2048                           ;main.c: 244: PWM2DCL = 0b00000000;
  2049  0549  0194               	clrf	20	;volatile
  2050                           
  2051                           ;main.c: 246: SetAzVal(0x00);
  2052  054A  3000               	movlw	0
  2053  054B  3184  2478  3185   	fcall	_SetAzVal
  2054                           
  2055                           ;main.c: 249: sci_Init(0, 0);
  2056  054E  3000               	movlw	0
  2057  054F  00F3               	movwf	sci_Init@baud+3
  2058  0550  3000               	movlw	0
  2059  0551  00F2               	movwf	sci_Init@baud+2
  2060  0552  3000               	movlw	0
  2061  0553  00F1               	movwf	sci_Init@baud+1
  2062  0554  3000               	movlw	0
  2063  0555  00F0               	movwf	sci_Init@baud
  2064  0556  01F4               	clrf	sci_Init@ninebits
  2065  0557  3184  24A7         	fcall	_sci_Init
  2066  0559  0008               	return
  2067  055A                     __end_of_init:	
  2068                           
  2069                           	psect	text6
  2070  04A7                     __ptext6:	
  2071 ;; *************** function _sci_Init *****************
  2072 ;; Defined at:
  2073 ;;		line 58 in file "main.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  baud            4    0[COMMON] unsigned long 
  2076 ;;  ninebits        1    4[COMMON] unsigned char 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  tmp             4    0        unsigned long 
  2079 ;;  X               2    0        int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      unsigned char 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2089 ;;      Params:         5       0       0       0
  2090 ;;      Locals:         0       0       0       0
  2091 ;;      Temps:          0       0       0       0
  2092 ;;      Totals:         5       0       0       0
  2093 ;;Total ram usage:        5 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_init
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function _sci_Init
  2104  04A7                     _sci_Init:	
  2105                           
  2106                           ;main.c: 60: int X;
  2107                           ;main.c: 61: unsigned long tmp;
  2108                           ;main.c: 85: SPBRG = 207;
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _sci_Init: [wreg+status,2+status,0]
  2112  04A7  3000               	movlw	0
  2113  04A8  0023               	movlb	3	; select bank3
  2114  04A9  009C               	movwf	28	;volatile
  2115  04AA  30CF               	movlw	207
  2116  04AB  009B               	movwf	27	;volatile
  2117                           
  2118                           ;main.c: 86: BRGH = 1;
  2119  04AC  151E               	bsf	30,2	;volatile
  2120                           
  2121                           ;main.c: 87: BRG16 = 0;
  2122  04AD  119F               	bcf	31,3	;volatile
  2123                           
  2124                           ;main.c: 89: SYNC = 0;
  2125  04AE  121E               	bcf	30,4	;volatile
  2126                           
  2127                           ;main.c: 90: SPEN = 1;
  2128  04AF  179D               	bsf	29,7	;volatile
  2129                           
  2130                           ;main.c: 91: CREN = 1;
  2131  04B0  161D               	bsf	29,4	;volatile
  2132                           
  2133                           ;main.c: 92: SREN = 0;
  2134  04B1  129D               	bcf	29,5	;volatile
  2135                           
  2136                           ;main.c: 93: TXIE = 0;
  2137  04B2  0021               	movlb	1	; select bank1
  2138  04B3  1211               	bcf	17,4	;volatile
  2139                           
  2140                           ;main.c: 94: RCIE = 0;
  2141  04B4  1291               	bcf	17,5	;volatile
  2142                           
  2143                           ;main.c: 95: TX9 = ninebits?1:0;
  2144  04B5  0874               	movf	sci_Init@ninebits,w
  2145  04B6  1903               	btfsc	3,2
  2146  04B7  2CBB               	goto	u650
  2147  04B8  0023               	movlb	3	; select bank3
  2148  04B9  171E               	bsf	30,6	;volatile
  2149  04BA  2CBD               	goto	u664
  2150  04BB                     u650:	
  2151  04BB  0023               	movlb	3	; select bank3
  2152  04BC  131E               	bcf	30,6	;volatile
  2153  04BD                     u664:	
  2154                           
  2155                           ;main.c: 96: RX9 = ninebits?1:0;
  2156  04BD  0874               	movf	sci_Init@ninebits,w
  2157  04BE  1903               	btfsc	3,2
  2158  04BF  2CC3               	goto	u670
  2159  04C0  0023               	movlb	3	; select bank3
  2160  04C1  171D               	bsf	29,6	;volatile
  2161  04C2  2CC5               	goto	l993
  2162  04C3                     u670:	
  2163  04C3  0023               	movlb	3	; select bank3
  2164  04C4  131D               	bcf	29,6	;volatile
  2165  04C5                     l993:	
  2166                           
  2167                           ;main.c: 97: TXEN = 1;
  2168  04C5  169E               	bsf	30,5	;volatile
  2169  04C6  0008               	return
  2170  04C7                     __end_of_sci_Init:	
  2171                           ;main.c: 107: return 0;
  2172                           ;	Return value of _sci_Init is never used
  2173                           
  2174                           
  2175                           	psect	text7
  2176  0478                     __ptext7:	
  2177 ;; *************** function _SetAzVal *****************
  2178 ;; Defined at:
  2179 ;;		line 200 in file "main.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  val             1    wreg     unsigned char 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  val             1    1[COMMON] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;		None               void
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2193 ;;      Params:         0       0       0       0
  2194 ;;      Locals:         1       0       0       0
  2195 ;;      Temps:          1       0       0       0
  2196 ;;      Totals:         2       0       0       0
  2197 ;;Total ram usage:        2 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; This function calls:
  2200 ;;		Nothing
  2201 ;; This function is called by:
  2202 ;;		_init
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           
  2208                           ;psect for function _SetAzVal
  2209  0478                     _SetAzVal:	
  2210                           
  2211                           ;incstack = 0
  2212                           ; Regs used in _SetAzVal: [wreg+status,2+status,0]
  2213                           ;SetAzVal@val stored from wreg
  2214  0478  00F1               	movwf	SetAzVal@val
  2215                           
  2216                           ;main.c: 202: PWM2DCH = (val>>2);
  2217  0479  0871               	movf	SetAzVal@val,w
  2218  047A  00F0               	movwf	??_SetAzVal
  2219  047B  3002               	movlw	2
  2220  047C                     u725:	
  2221  047C  36F0               	lsrf	??_SetAzVal,f
  2222  047D  0B89               	decfsz	9,f
  2223  047E  2C7C               	goto	u725
  2224  047F  0870               	movf	??_SetAzVal,w
  2225  0480  002C               	movlb	12	; select bank12
  2226  0481  0095               	movwf	21	;volatile
  2227                           
  2228                           ;main.c: 203: PWM2DCL = (val<<6);
  2229  0482  0871               	movf	SetAzVal@val,w
  2230  0483  00F0               	movwf	??_SetAzVal
  2231  0484  3005               	movlw	5
  2232  0485                     u735:	
  2233  0485  35F0               	lslf	??_SetAzVal,f
  2234  0486  3EFF               	addlw	-1
  2235  0487  1D03               	skipz
  2236  0488  2C85               	goto	u735
  2237  0489  3570               	lslf	??_SetAzVal,w
  2238  048A  0094               	movwf	20	;volatile
  2239  048B  0008               	return
  2240  048C                     __end_of_SetAzVal:	
  2241                           
  2242                           	psect	text8
  2243  0464                     __ptext8:	
  2244 ;; *************** function _SetAltVal *****************
  2245 ;; Defined at:
  2246 ;;		line 194 in file "main.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  val             1    wreg     unsigned char 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  val             1    1[COMMON] unsigned char 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, status,2, status,0
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2260 ;;      Params:         0       0       0       0
  2261 ;;      Locals:         1       0       0       0
  2262 ;;      Temps:          1       0       0       0
  2263 ;;      Totals:         2       0       0       0
  2264 ;;Total ram usage:        2 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_init
  2270 ;;		_main
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           
  2275                           ;psect for function _SetAltVal
  2276  0464                     _SetAltVal:	
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in _SetAltVal: [wreg+status,2+status,0]
  2280                           ;SetAltVal@val stored from wreg
  2281  0464  00F1               	movwf	SetAltVal@val
  2282                           
  2283                           ;main.c: 196: PWM1DCH = (val>>2);
  2284  0465  0871               	movf	SetAltVal@val,w
  2285  0466  00F0               	movwf	??_SetAltVal
  2286  0467  3002               	movlw	2
  2287  0468                     u705:	
  2288  0468  36F0               	lsrf	??_SetAltVal,f
  2289  0469  0B89               	decfsz	9,f
  2290  046A  2C68               	goto	u705
  2291  046B  0870               	movf	??_SetAltVal,w
  2292  046C  002C               	movlb	12	; select bank12
  2293  046D  0092               	movwf	18	;volatile
  2294                           
  2295                           ;main.c: 197: PWM1DCL = (val<<6);
  2296  046E  0871               	movf	SetAltVal@val,w
  2297  046F  00F0               	movwf	??_SetAltVal
  2298  0470  3005               	movlw	5
  2299  0471                     u715:	
  2300  0471  35F0               	lslf	??_SetAltVal,f
  2301  0472  3EFF               	addlw	-1
  2302  0473  1D03               	skipz
  2303  0474  2C71               	goto	u715
  2304  0475  3570               	lslf	??_SetAltVal,w
  2305  0476  0091               	movwf	17	;volatile
  2306  0477  0008               	return
  2307  0478                     __end_of_SetAltVal:	
  2308                           
  2309                           	psect	text9
  2310  04C7                     __ptext9:	
  2311 ;; *************** function _PrintStrToUART *****************
  2312 ;; Defined at:
  2313 ;;		line 264 in file "main.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  str             1    wreg     PTR unsigned char 
  2316 ;;		 -> main@str(20), 
  2317 ;;  len             1    1[COMMON] unsigned char 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  str             1    3[COMMON] PTR unsigned char 
  2320 ;;		 -> main@str(20), 
  2321 ;;  ii              1    4[COMMON] unsigned char 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;		None               void
  2324 ;; Registers used:
  2325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2331 ;;      Params:         1       0       0       0
  2332 ;;      Locals:         2       0       0       0
  2333 ;;      Temps:          1       0       0       0
  2334 ;;      Totals:         4       0       0       0
  2335 ;;Total ram usage:        4 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    1
  2338 ;; This function calls:
  2339 ;;		_putch
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _PrintStrToUART
  2347  04C7                     _PrintStrToUART:	
  2348                           
  2349                           ;incstack = 0
  2350                           ; Regs used in _PrintStrToUART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2351                           ;PrintStrToUART@str stored from wreg
  2352  04C7  00F3               	movwf	PrintStrToUART@str
  2353                           
  2354                           ;main.c: 266: unsigned char ii;
  2355                           ;main.c: 267: for( ii = 0; ii < len; ii++)
  2356  04C8  01F4               	clrf	PrintStrToUART@ii
  2357  04C9                     l1117:	
  2358  04C9  0871               	movf	PrintStrToUART@len,w
  2359  04CA  0274               	subwf	PrintStrToUART@ii,w
  2360  04CB  1803               	btfsc	3,0
  2361  04CC  0008               	return
  2362                           
  2363                           ;main.c: 268: {
  2364                           ;main.c: 269: putch(str[ii]);
  2365  04CD  0874               	movf	PrintStrToUART@ii,w
  2366  04CE  0773               	addwf	PrintStrToUART@str,w
  2367  04CF  00F2               	movwf	??_PrintStrToUART
  2368  04D0  0872               	movf	??_PrintStrToUART,w
  2369  04D1  0086               	movwf	6
  2370  04D2  0187               	clrf	7
  2371  04D3  0801               	movf	1,w
  2372  04D4  3184  244E  3184   	fcall	_putch
  2373                           
  2374                           ;main.c: 271: if( (str[ii] == '\0') || (str[ii] == '\r') )
  2375  04D7  0874               	movf	PrintStrToUART@ii,w
  2376  04D8  0773               	addwf	PrintStrToUART@str,w
  2377  04D9  00F2               	movwf	??_PrintStrToUART
  2378  04DA  0872               	movf	??_PrintStrToUART,w
  2379  04DB  0086               	movwf	6
  2380  04DC  0187               	clrf	7
  2381  04DD  0801               	movf	1,w
  2382  04DE  1903               	btfsc	3,2
  2383  04DF  0008               	return
  2384  04E0  0874               	movf	PrintStrToUART@ii,w
  2385  04E1  0773               	addwf	PrintStrToUART@str,w
  2386  04E2  00F2               	movwf	??_PrintStrToUART
  2387  04E3  0872               	movf	??_PrintStrToUART,w
  2388  04E4  0086               	movwf	6
  2389  04E5  0187               	clrf	7
  2390  04E6  300D               	movlw	13
  2391  04E7  0601               	xorwf	1,w
  2392  04E8  1903               	btfsc	3,2
  2393  04E9  0008               	return
  2394                           
  2395                           ;main.c: 272: break;
  2396  04EA  3001               	movlw	1
  2397  04EB  00F2               	movwf	??_PrintStrToUART
  2398  04EC  0872               	movf	??_PrintStrToUART,w
  2399  04ED  07F4               	addwf	PrintStrToUART@ii,f
  2400  04EE  2CC9               	goto	l1117
  2401  04EF                     __end_of_PrintStrToUART:	
  2402                           
  2403                           	psect	text10
  2404  044E                     __ptext10:	
  2405 ;; *************** function _putch *****************
  2406 ;; Defined at:
  2407 ;;		line 162 in file "main.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  data            1    wreg     unsigned char 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  data            1    0[COMMON] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;		None               void
  2414 ;; Registers used:
  2415 ;;		wreg
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2421 ;;      Params:         0       0       0       0
  2422 ;;      Locals:         1       0       0       0
  2423 ;;      Temps:          0       0       0       0
  2424 ;;      Totals:         1       0       0       0
  2425 ;;Total ram usage:        1 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_PrintStrToUART
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _putch
  2436  044E                     _putch:	
  2437                           
  2438                           ;incstack = 0
  2439                           ; Regs used in _putch: [wreg]
  2440                           ;putch@data stored from wreg
  2441  044E  00F0               	movwf	putch@data
  2442  044F                     l106:	
  2443                           ;main.c: 165: ;
  2444                           
  2445                           ;main.c: 164: while (!TXIF)
  2446                           
  2447  044F  0020               	movlb	0	; select bank0
  2448  0450  1E11               	btfss	17,4	;volatile
  2449  0451  2C4F               	goto	l106
  2450                           
  2451                           ;main.c: 166: TXREG = data;
  2452  0452  0870               	movf	putch@data,w
  2453  0453  0023               	movlb	3	; select bank3
  2454  0454  009A               	movwf	26	;volatile
  2455  0455  0008               	return
  2456  0456                     __end_of_putch:	
  2457  007E                     btemp	set	126	;btemp
  2458  007E                     wtemp	set	126
  2459  007E                     wtemp0	set	126
  2460  0080                     wtemp1	set	128
  2461  0082                     wtemp2	set	130
  2462  0084                     wtemp3	set	132
  2463  0086                     wtemp4	set	134
  2464  0088                     wtemp5	set	136
  2465  007F                     wtemp6	set	127
  2466  007E                     ttemp	set	126
  2467  007E                     ttemp0	set	126
  2468  0081                     ttemp1	set	129
  2469  0084                     ttemp2	set	132
  2470  0087                     ttemp3	set	135
  2471  007F                     ttemp4	set	127
  2472  007E                     ltemp	set	126
  2473  007E                     ltemp0	set	126
  2474  0082                     ltemp1	set	130
  2475  0086                     ltemp2	set	134
  2476  0080                     ltemp3	set	128


Data Sizes:
    Strings     46
    Constant    8
    Data        3
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     48      51
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[7]), main@azstr(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@str(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    PrintStrToUART@str	PTR unsigned char  size(1) Largest target is 20
		 -> main@str(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _sprintf->___lwdiv
    _init->_sci_Init
    _PrintStrToUART->_putch

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0    2724
                                             18 BANK0     30    30      0
                     _PrintStrToUART
                          _SetAltVal
                           _SetAzVal
                               _init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    22      5    1638
                                              8 COMMON     5     0      5
                                              0 BANK0     18    18      0
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     238
                          _SetAltVal
                           _SetAzVal
                           _sci_Init
 ---------------------------------------------------------------------------------
 (2) _sci_Init                                            11     6      5     150
                                              0 COMMON     5     0      5
 ---------------------------------------------------------------------------------
 (2) _SetAzVal                                             2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SetAltVal                                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _PrintStrToUART                                       4     3      1     280
                                              1 COMMON     4     3      1
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PrintStrToUART
     _putch
   _SetAltVal
   _SetAzVal
   _init
     _SetAltVal
     _SetAzVal
     _sci_Init
   _sprintf
     ___lwdiv
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      40       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     30      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      40      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Jun 13 13:53:17 2016

            __CFG_CP$OFF 0000      ___wmul@multiplicand 0072                      l106 044F  
                    l136 0598                      l147 05C3                      l228 0494  
                    l180 0665                      l149 05CA                      l993 04C5  
                    _PR2 001B                      u705 0468                      u650 04BB  
                    u715 0471                      u725 047C                      u670 04C3  
                    u735 0485                      u815 04FA                      u664 04BD  
                    u835 0504                      u845 050E                      u855 0516  
                    u775 0495                      u785 049A                      _RX9 0CEE  
                    u955 06D9                      _TX9 0CF6                      u995 0757  
           __CFG_BORV$LO 0000                      wreg 0009             __CFG_IESO$ON 0000  
           __CFG_LVP$OFF 0000                     l1013 0462                     l1041 04F7  
                   l1201 0761                     l1043 0503                     l1019 048E  
                   l1117 04C9                     l1053 051E                     l1205 077D  
                   l1133 066A                     l1301 05B8                     l1207 0780  
                   l1135 0673                     l1127 0661                     l1311 05CC  
                   l1049 0515                     l1225 07AD                     l1217 0796  
                   l1161 06D3                     l1313 05D1                     l1321 05E4  
                   l1235 07B1                     l1219 079A                     l1171 06E2  
                   l1155 06C3                     l1147 06AF                     l1139 0680  
                   l1315 05D6                     l1307 05C4                     l1173 06F7  
                   l1165 06E0                     l1237 063F                     l1341 060A  
                   l1159 06C5                     l1239 07EB                     l1183 0715  
                   l1335 0601                     l1327 05F5                     l1319 05DB  
                   l1185 0730                     l1257 057C                     l1195 0742  
                   l1179 070A                     l1347 062A                     l1283 0594  
                   l1275 058A                     l1293 05A7                     l1279 058E  
                   l1289 05A0                     l1299 05B0                     STR_1 0808  
                   STR_2 082F                     STR_3 081E                     _BRGH 0CF2  
                   _CREN 0CEC                     _FERR 0CEA                     u1015 0770  
                   u1247 0573                     u1257 05EC                     u1267 0631  
                   _RCIE 048D                     _RCIF 008D                     _OERR 0CE9  
                   _RX9D 0CE8                     _SPEN 0CEF                     _SREN 0CED  
                   _TXIE 048C                     _TXEN 0CF5                     _TXIF 008C  
                   _SYNC 0CF4             __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000  
                   _main 055A                     _init 0523              main@wasMove 004C  
                   fsr0h 0005                     fsr1h 0007                     fsr0l 0004  
                   indf0 0000                     indf1 0001                     fsr1l 0006  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0002                     ttemp 007E                     wtemp 007E  
          __CFG_MCLRE$ON 0000                    ?_main 0070                    ?_init 0070  
                  _BRG16 0CFB            __CFG_WDTE$OFF 0000                    _T2CON 001C  
        __end_of___lwdiv 0523                    _RCREG 0199                    _SPBRG 019B  
                  _TXREG 019A            __CFG_PWRTE$ON 0000         PrintStrToUART@ii 0074  
        __end_of_isdigit 0464                    _putch 044E                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __end_of_sprintf 07F1          __initialization 07F1  
           __end_of_main 0639             __end_of_init 055A           __CFG_LPBOR$OFF 0000  
       __end_of_SetAzVal 048C                   ??_main 0032                   ??_init 0075  
                 ?_putch 0070                   _OSCCON 0099       __size_of_SetAltVal 0014  
                 ___wmul 048C           __CFG_STVREN$ON 0000                ??___lwdiv 0074  
      PrintStrToUART@len 0071         __end_of_sci_Init 04C7        PrintStrToUART@str 0073  
              ??_isdigit 0070              SetAzVal@val 0071                ??_sprintf 0020  
__end_of__initialization 07FD           __pcstackCOMMON 0070             __pidataBANK0 044B  
          __end_of_putch 0456  __size_of_PrintStrToUART 0028        __end_of_SetAltVal 0478  
           sprintf@width 002F                  ??_putch 0070                ?_SetAzVal 0070  
             __pmaintext 055A                  ?___wmul 0070                  _PWM1DCH 0612  
                _PWM1DCL 0611                  _PWM2DCH 0615                  _PWM2DCL 0614  
                _PWM1CON 0613                  _PWM2CON 0616                ?_sci_Init 0070  
             ??_SetAzVal 0070          __size_of___wmul 001B                  ___lwdiv 04EF  
                __ptext1 0639                  __ptext2 0456                  __ptext3 048C  
                __ptext4 04EF                  __ptext5 0523                  __ptext6 04A7  
                __ptext7 0478                  __ptext8 0464                  __ptext9 04C7  
      __end_of_hexpowers 0808                  _isdigit 0456                  _sprintf 0639  
                main@str 0035     end_of_initialization 07FD             SetAltVal@val 0071  
             ??_sci_Init 0075             __pstringtext 0800             sci_Init@baud 0070  
              _PORTAbits 000C                _PORTCbits 000E           _PrintStrToUART 04C7  
       __CFG_FOSC$INTOSC 0000                _TRISAbits 008C                _TRISCbits 008E  
             main@altDir 004D               main@altVal 004E           __end_of___wmul 04A7  
 __end_of_PrintStrToUART 04EF      start_initialization 07F1                _SetAltVal 0464  
      __size_of_SetAzVal 0014                 ??___wmul 0074              __pdataBANK0 0050  
        ?_PrintStrToUART 0071                ___latbits 0001            __pcstackBANK0 0020  
             ?_SetAltVal 0070              sprintf@flag 0025              sprintf@prec 0028  
      __size_of_sci_Init 0020         ___lwdiv@dividend 0072         sci_Init@ninebits 0074  
               ?___lwdiv 0070                 ?_isdigit 0070                _hexpowers 0800  
       ___lwdiv@quotient 0075                 ?_sprintf 0078           __size_of_putch 0008  
         ___wmul@product 0074                main@F4271 0050        ___wmul@multiplier 0070  
              main@azDir 004F                main@azstr 0049              ??_SetAltVal 0070  
               _SetAzVal 0478         __size_of___lwdiv 0034              _isdigit$410 0070  
             _ANSELAbits 018C               _ANSELCbits 018E               sprintf@idx 0024  
             sprintf@len 002C               sprintf@val 0026         __size_of_isdigit 000E  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077                 __ptext10 044E  
       __size_of_sprintf 01B8            __size_of_main 00DF            __size_of_init 0037  
               _sci_Init 04A7         ??_PrintStrToUART 0072                putch@data 0070  
               isdigit@c 0071                sprintf@ap 0029                sprintf@cp 002A  
              sprintf@sp 002E        __CFG_CLKOUTEN$OFF 0000                 sprintf@c 0031  
               sprintf@f 0078  
