/// 
///   Name: WirelessComm.cpp
///   Purpose: Define the WirelessComm API
///

#include "WirelessComm.h"


/// constructor
WirelessComm::WirelessComm() : m_RxBuffer(RXBUFF_SIZE)
{
	// set the filestream to default
	m_Filestream = -1;
}

/// destructor
WirelessComm::~WirelessComm()
{
	// make sure to close the file
	if( m_Filestream != -1 )
		close(m_Filestream);
}

/// Initialization function
/// <returns> success </returns>
bool WirelessComm::Init()
{
	// open the filestream
	m_Filestream = open(UART_COMMFILE, O_RDWR | O_NOCTTY | O_NDELAY); //Open in non blocking read/write mode
	if (m_Filestream == -1)
	{
		//ERROR - CAN'T OPEN SERIAL PORT
		m_ErrorMsgs.push_back("Unable to open UART COMM");
		return false;
	}

	//CONFIGURE THE UART
	//The flags (defined in /usr/include/termios.h - see http://pubs.opengroup.org/onlinepubs/007908799/xsh/termios.h.html):
	//	Baud rate:- B1200, B2400, B4800, B9600, B19200, B38400, B57600, B115200, B230400, B460800, B500000, B576000, B921600, 
	//                  B1000000, B1152000, B1500000, B2000000, B2500000, B3000000,B3500000, B4000000
	//	CSIZE:- CS5, CS6, CS7, CS8
	//	CLOCAL - Ignore modem status lines
	//	CREAD - Enable receiver
	//	IGNPAR = Ignore characters with parity errors
	//	ICRNL - Map CR to NL on input (Use for ASCII comms where you want to auto correct end of line characters - don't use for bianry comms!)
	//	PARENB - Parity enable
	//	PARODD - Odd parity (else even)
	struct termios options;
	tcgetattr(m_Filestream, &options);
	options.c_cflag = UART_BAUD | CS8 | CLOCAL | CREAD;		//<Set baud rate
	options.c_iflag = IGNPAR;
	options.c_oflag = 0;
	options.c_lflag = 0;
	tcflush(m_Filestream, TCIFLUSH);
	tcsetattr(m_Filestream, TCSANOW, &options);

	// now, we need to attempt to connect to the wireless modem
	// enter command mode
	char t[5] = {'+','+','+',' ',' '};

	int count = write(m_Filestream, &t[0],3);
	if (count < 0)
	{
		m_ErrorMsgs.push_back("Error writing to UART COMM");
		return false;
	}

	// good to go
	sleep(1); // sleep for 1 second
	
	bool failure = false;

	// read the buffer
	count = read(m_Filestream, &t[0], 3);
	if( count < 2 )
	{
		m_ErrorMsgs.push_back("No response from command mode");
		failure = true;
	}	

	if( t[0] != 'O' && t[1] != 'K' )
	{
		m_ErrorMsgs.push_back("Comm did not ACK Command mode");
		failure = true;
	}
	
	// set the API command mode
	t[0] = 'A';
	t[1] = 'T';
	t[2] = 'A';
	t[3] = 'P';
	t[4] = '\n';
	count = write(m_Filestream, &t[0],5);

	t[0] = '1'; // non-escaped API
	t[1] = '\n';
	count = write(m_Filestream, &t[0],2);

	// write to memory
	t[0] = 'A';
	t[1] = 'T';
	t[2] = 'W';
	t[3] = 'R';
	t[4] = '\n';
	count = write(m_Filestream, &t[0],5);

	// read the buffer
	count = read(m_Filestream, &t[0], 3);
	if( count < 2 )
	{
		m_ErrorMsgs.push_back("No response from memory write");
		failure = true;
	}

	if( t[0] != 'O' && t[1] != 'K' )
	{
		m_ErrorMsgs.push_back("Comm did not ACK memory write");
		failure = true;
	}	

	t[0] = 'A';
	t[1] = 'T';
	t[2] = 'C';
	t[3] = 'N';
	t[4] = '\n';
	count = write(m_Filestream, &t[0],5);
	
	// we should now be in API mode
	// or we failed
	
	// clear the RX Buffer
	HasData();
	m_RxBuffer.Clear();	
	
	return failure;
	
}

/// Shutdown function
/// <returns> success </returns>
bool WirelessComm::Shutdown()
{

	// make sure to close the file
	if( m_Filestream != -1 )
		close(m_Filestream);

	m_Filestream = -1;

	// clear the error logs
	m_ErrorMsgs.clear();


	return false;
}

/// function to cycle the connection
/// <returns> success </returns>
bool WirelessComm::Cycle()
{
	return false;
}

/// function to write a data stream
/// <param name='data'> input data stream pointer </param>
/// <param name='length'> length of input data stream in bytes </param>
/// <returns> length of data written, -1 for failure </returns>
int WirelessComm::WriteStream(char* data, int length)
{
	if( m_Filestream == -1 )
		return -1;

	//int count = write(uart0_filestream, &tx_buffer[0], (p_tx_buffer - &tx_buffer[0]));
	//if (count < 0)
	//{
	//	printf("UART TX error\n");
	//}

	return -1;
}

/// function to read the data in the buffer
/// <param name='data'> a buffer pointer to populate </param>
/// <returns> length of data stream allocated, -1 for failure </param>
int WirelessComm::ReadStream(char*& data)
{
	data = NULL;

	// get the length of data in the RxBuffer
    	int len = m_RxBuffer.GetFilledSize();
	if ( len > 0 )
	{
		data = new char[len];
		memcpy(data, m_RxBuffer.GetBuffStart(), len);
		m_RxBuffer.Clear();
	}

	return len;
}

/// function to check for data in buffer
/// <returns> 1 for has data, 0 for none, -1 for error </returns>
int WirelessComm::HasData()
{
	if( m_Filestream == -1 )
		return -1;

	int readLen = 0;
	if( m_RxBuffer.GetEmptySize() > 0)
	{
		int len = m_RxBuffer.GetEmptySize();
		readLen = read(m_Filestream, (void*)(m_RxBuffer.GetBuff()), len);
		m_RxBuffer.SetBuffReadLen(readLen);
	}

	if( readLen > 0 )
		return 1;
	else
		return 0;
}

/// function to get error message
/// <returns> error message </returns>
string WirelessComm::GetErrorMessage()
{
	string msg;
	for(list<string>::iterator it = m_ErrorMsgs.begin();
		it != m_ErrorMsgs.end(); it++)
	{
		msg = msg + (*it);
		msg = msg + "\n";
	} 

	return msg;
}

/// function to set the transmission level
/// <param name='level'> Tx Level: 
///	0 - 1mW
///     1 - 10 mW
///	2 - 100 mW
///	3 - 500 mW
///	4 - 1 W
/// </param>
void WirelessComm::SetTxLevel(int level)
{
	if( level < 0 || level > 4 )
		return; // not a valid level

	// send the level command
	char lev = char(level);
	
	// set TxLevel
	TxSend(0x3A,&lev,1);
}

void WirelessComm::SetSleepMode(int mode)
{
	if( mode < 0 || mode > 8 )
		return; // not a valid level

	if( mode == 3 )
		return; // reserved;
	
}

void WirelessComm::TxSend(unsigned char cmd, char* data, int len)
{
	// get the frame length
	unsigned short frameLen = len + 1;

	// allocate the frame
	unsigned char* frame = new unsigned char[frameLen + 4];
	
	// set the frame deliniator
	frame[0] = 0x7E;
	
	// set the frame length
	frame[1] = (unsigned char)( (frameLen & 0xFF00) >> 8 ); // MSB
	frame[2] = (unsigned char)( frameLen & 0x00FF ); 	 // LSB
	frame[3] = cmd;
	
	// copy the frame data
	memcpy(&frame[4],data, len);

	// calculate the checksum
	unsigned int cs = 0 ;
	for(int i = 0; i < len; i++ )
		cs += frame[4 + i];
	
	// keep the lower 8 bits
	frame[ len + 4 ] = 0xFF - (unsigned char)(0x000000FF&cs);

	// send the frame
	int count = write(m_Filestream, frame, frameLen + 4);
		
	// clear the frame
	delete [] frame;
}

